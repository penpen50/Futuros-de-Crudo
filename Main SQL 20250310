Select top 10 * from  [dbo].[CL_5min_IndividualCon] where TradingDatetime='2008-08-31 16:10:00.0000000'

--CREATE TABLE [dbo].[CL_Events] (
--    DATE DATE,
--    Event VARCHAR(50)
--);

drop table if exists #tmp1
Select a.[TradingDateTime] as [T_DateTime],
cast (a.TradingDateTime as date) as Dateonly,
cast(a.TradingDateTime as Time) as Timeonly,
convert(decimal(10,2),[Open]) as [Open],
convert(decimal(10,2),[High]) as [High],
convert(decimal(10,2),[Low]) as [Low],
convert(decimal(10,2),[Close]) as [Close],
[Volume]
into #tmp1
from  [dbo].[CL_5min_IndividualCon]  a

--Select * from [dbo].[CL_5min_IndividualCon] where TradingDateTime='10/28/2024 18:05' and Volume=21

-- Create temp table with first Fridays since 2008
drop table if exists #NFPDates
;WITH DateSequence AS (
    SELECT CAST('2008-01-01' AS DATE) AS [Date]
    UNION ALL
    SELECT DATEADD(MONTH, 1, [Date])
    FROM DateSequence
    WHERE [Date] < GETDATE()
),
FirstFridayOfMonth AS (
    SELECT 
        [Date],
        DATEADD(DAY, 
            CASE 
                -- Get number of days until first Friday (Friday = 6)
                WHEN DATEPART(WEEKDAY, [Date]) <= 6 
                THEN 6 - DATEPART(WEEKDAY, [Date])
                ELSE 6 + (7 - DATEPART(WEEKDAY, [Date]))
            END,
            [Date]
        ) AS FirstFriday
    FROM DateSequence
)
SELECT FirstFriday AS [Date],'NFP' as [Event]
INTO #NFPDates
FROM FirstFridayOfMonth
OPTION (MAXRECURSION 0)
-- You can verify the results with:
SELECT * FROM #NFPDates ORDER BY [Date]

Select top 10 * from [dbo].[CL_Events]

--INSERT INTO [dbo].[CL_Events]
--SELECT [Date], [Event] FROM #NFPDates


Select Dateonly,count(Dateonly)  from #tmp1 group by Dateonly order by Dateonly desc

drop table if exists #tmp2
Select b.*,
	case when b.[Close]>b.[Open] then 'Green Candle' else 'Red Candle' end as Candle_Color,
	case 
	     when TimeOnly between '00:00' and '02:00' then 'ADR'
		 when TimeOnly between '02:05' and '02:55' then 'ADR-ODR'
		 when TimeOnly between '03:00' and '08:30' then 'ODR'
		 when TimeOnly between '08:35' and '09:25' then 'ODR-RDR'
	     when TimeOnly between '09:30' and '16:00' then 'RDR'
		 when TimeOnly between '16:05' and '19:25' then 'RDR-ADR'
		 when TimeOnly between '19:30' and '23:55' then 'ADR'
	else 'Something wrong' end as session,
	case 
		 when TimeOnly between '03:00' and '03:55' then 'ODR DR Box'
		 when TimeOnly between '09:30' and '10:25' then 'RDR DR Box'
	     when TimeOnly between '19:30' and '20:25' then 'ADR DR Box'
		 else 'Other' end as [DR_Box],
	case when TimeOnly between '18:00' and '23:55' then dateadd(day,1,Dateonly) --between '19:30' and '23:55'
		 else DateOnly end as [DR_date]
	into #tmp2
from #tmp1 b

drop table if exists #tmp2_1
Select *, 	case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end as DoW 	
	into #tmp2_1 from #tmp2
Select * from #tmp2_1 where DoW=7 order by T_DateTime
drop table if exists #tmp3
--Select a.DR_Date,a. [Session] from #tmp2 a group by a.DR_Date,a. [Session] order by a.DR_Date

Select a.DR_Date, a.[Session], b.[Open] as [M7BoxOpen], c.[Close] as [M7BoxClose], j.[ExitPrice], dd.DR_High, ee.IDR_High, dd.DR_Low, ee.IDR_Low
	into #tmp3
	from #tmp2 a
left join
--DR open price ie M7 Box open price
	(Select DR_Date, TimeOnly, [Session], [Open]
		from #tmp2 where TimeOnly in ('19:30', '03:00', '09:30')) b
	on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]
--DR close price
left join
	(Select DR_Date, TimeOnly, [Session], [Close]
		from #tmp2 where TimeOnly in ('20:25', '03:55','10:25')) c
	on a.DR_Date=c.DR_Date and a.[Session]=c.[Session]
--ADR, ODR, and RDR exit price it session does not reach target
left join
	(Select DR_Date,TimeOnly, [Session],[Close] as [ExitPrice] 
	from
		(Select DR_Date, TimeOnly, [Session], [Close],
			dense_rank () over(partition by DR_Date,[Session] order by Timeonly desc) as [rank]
				from #tmp2
				where TimeOnly in ('01:55', '08:25','13:00','15:55')) i
				where [rank]=1)j
		on a.DR_Date=j.DR_Date and a.[Session]=j.[Session]
	left join
--DR is highest high and lowest Low
		(Select d.DR_Date, d.[Session], max(d.[HighLow]) as DR_high, min (d.[HighLow]) as DR_Low 				
			from
		(Select DR_Date, [Session], [High] as [HighLow] from #tmp2 where DR_Box not in ('Other') 
		 union all
	     Select DR_Date, [Session], [Low] as [HighLow] from #tmp2 where DR_Box not in ('Other')) d 
	 group by d.DR_Date, d.[Session]) dd
	 on a.DR_Date=dd.DR_Date and a.[Session]=dd.[Session]
left join
--IDR high and IDR low is the highest and lowest of Open and Close
	(Select e.DR_Date, e.[Session], max(e.[Close]) as IDR_high, min (e.[Close]) as IDR_Low
			from #tmp2 e where DR_box not in ('Other') group by e.DR_Date, e.[Session])ee
	on a.DR_Date=ee.DR_Date and a.[Session]=ee.[Session]
where a.[Session] in ('ADR','ODR','RDR')
group by a.DR_Date, a.[Session], b.[Open], c.[Close], j.[ExitPrice],dd.DR_High, ee.IDR_High, dd.DR_Low, ee.IDR_Low

Select top 100* from #tmp3 where DR_Date>='2024-11-01' order by DR_Date desc

--First close time above high during a session
--Get all the close that is above or below the DR High or Low to determine L or S day
--#tmp4 is an auxilary dataset for #tmp5

drop table if exists #tmp4
Select a.*,
	b.DR_High,
	b.DR_Low,
	case when (a.[Close]>b.DR_High) then 1 else 0 end as Conf_high_test, --if any close above DR_H then Long
	case when (a.[Close]<b.DR_Low) then 1 else 0 end as Conf_Low_test, --If any close below DR_L then Short
	case when (a.[Close]>b.DR_High) or (a.[Close]<b.[DR_Low]) then 1 else 0 end as Conf_test --determing if candle is inside or outside DR
into #tmp4
from #tmp2 a
left join #tmp3 b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]

--Select top 10 * from #tmp3


--Figure out confimation time
--#tmp5 stores all the important time and confirmation direction
--Figure out confimation time
--#tmp5 stores all the important time and confirmation direction
--Select * from #tmp4

drop table if exists #tmp5

Select e.*,aaaa.First_Conf_T_DateTime, aaaa.First_Conf_Time, bbbb.Long_Conf_T_DateTime, bbbb.Long_Conf_Time,
	cccc.Short_Conf_T_DateTime, cccc.Short_Conf_Time,
	case when (aaaa.First_Conf_T_DateTime=bbbb.Long_Conf_T_DateTime) then 'Long'
		 when (aaaa.First_Conf_T_DateTime=cccc.Short_Conf_T_DateTime) then 'Short'
	else 'No Conf' end as [Conf_Direction],
	
	case when bbbb.Long_Conf_T_DateTime is not null and cccc.Short_Conf_T_DateTime is not null then 'F'
		else 'T' end as [TF Day],
	--DATEADD(SECOND, DATEDIFF(SECOND, '00:00:00', bbbb.Long_Conf_T_DateTime) + DATEDIFF(SECOND, '00:00:00', cccc.Short_Conf_T_DateTime) - DATEDIFF(SECOND, '00:00:00', aaaa.FirstT_DateTime), '00:00:00') AS [False DateTime],

    CASE
        WHEN bbbb.Long_Conf_T_DateTime IS NULL OR cccc.Short_Conf_T_DateTime IS NULL THEN NULL
        WHEN bbbb.Long_Conf_T_DateTime > cccc.Short_Conf_T_DateTime  THEN bbbb.Long_Conf_T_DateTime
        WHEN cccc.Short_Conf_T_DateTime > bbbb.Long_Conf_T_DateTime THEN cccc.Short_Conf_T_DateTime
        ELSE NULL
    END AS [False DateTime],

	cast(CASE
        WHEN bbbb.Long_Conf_T_DateTime IS NULL OR cccc.Short_Conf_T_DateTime IS NULL THEN NULL
        WHEN bbbb.Long_Conf_T_DateTime > cccc.Short_Conf_T_DateTime THEN bbbb.Long_Conf_T_DateTime
        WHEN cccc.Short_Conf_T_DateTime > bbbb.Long_Conf_T_DateTime THEN cccc.Short_Conf_T_DateTime
        ELSE NULL end as time)
    AS [False Time],

	--DR Box Color
	case 
		 when ff.[M7BoxClose]>ff.[M7BoxOpen] then 'Green'
		 when ff.[M7BoxClose]<ff.[M7BoxOpen] then 'Red'
		 else 'Grey' end as [Box Color],
		 ff.[M7BoxOpen], ff.[M7BoxClose], ff.[ExitPrice],ff.[DR_High], ff.[IDR_High], ff.[DR_Low], ff.[IDR_Low],

	--tick and SD size
	convert (decimal(10,3), (ff.IDR_High-ff.IDR_Low)/10) as SD_Size, --dollar value per SD
	convert (decimal(10,2), (ff.IDR_High-ff.IDR_Low) *10) as SD_tick_Size,
--M7 Box tick Size
	convert (decimal(10,3), abs(ff.[M7BoxClose]-ff.[M7BoxOpen])/10) as M7Box_SD_Size, --dollar value per SD
	convert (decimal(10,2), abs(ff.[M7BoxClose]-ff.[M7BoxOpen]) *10) as M7Box_SD_tick_Size
into #tmp5
from
	(Select ee.DR_Date, ee.[Session]
	from #tmp4 ee
	where ee.[Session] in ('ADR','ODR','RDR')
	group by ee.DR_Date, ee.[Session]) e
left join
--First Confirmation time
	(Select aaa.[Session], aaa.DR_date, aaa.T_DateTime as First_Conf_T_DateTime, aaa.TimeOnly as First_Conf_Time from
		(Select aa.*,
			   row_number() over (partition by DR_Date, [Session] order by [T_DateTime] asc) as row_num
		from
			  (Select * from #tmp4 where Conf_test=1 and [Session] in ('ADR','ODR','RDR') and DR_Box in ('Other'))aa) aaa
		where aaa.row_num=1) aaaa
	on e.DR_Date=aaaa.[DR_date] and e.[Session]=aaaa.[Session]

left join
--First Confirmation High time
--To determine the kind of confirmation direction and T/F day, we need to take the first L or S occurance
--First Confirmation High Time
	(Select bbb.[Session], bbb.DR_date, bbb.T_DateTime as Long_Conf_T_DateTime, bbb.Timeonly as Long_Conf_Time from 
			(Select bb.*,
					row_number() over (partition by DR_Date, [Session] order by [T_DateTime] asc) as row_num
	from
			(Select * from #tmp4 where Conf_high_test=1) bb) bbb
		where bbb.row_num=1)bbbb						
on e.DR_Date=bbbb.[DR_date] and e.[Session]=bbbb.[Session]

--First Confirmation Low time
	left join
		(Select ccc.[Session],ccc.DR_date,ccc.T_DateTime as Short_Conf_T_DateTime, ccc.TimeOnly as Short_Conf_Time from (
				Select cc.*,
			   row_number() over (partition by DR_Date, [Session] order by [T_DateTime] asc) as row_num
			   from
		(Select * from #tmp4 where Conf_Low_test=1) cc) ccc
		where ccc.row_num=1) cccc
	on e.DR_Date=cccc.[DR_date] and e.[Session]=cccc.[Session]

--Join important DR price level from #tmp3
left join
	(Select f.* from #tmp3 f where [Session] in ('ADR','ODR','RDR')) ff
	on e.DR_Date=ff. [DR_date] and e.[Session]=ff.[Session]

--Select * from #tmp5 where [Close] is null order by DR_Date

--Select top 100 * from #tmp5 where DR_Date='2008-01-18'

--SELECT 
--    COLUMN_NAME, 
--    DATA_TYPE
--FROM 
--    tempdb.INFORMATION_SCHEMA.COLUMNS
--WHERE 
--    TABLE_NAME LIKE '#tmp12%' ;

--Add important price levels to #tmp5
--Determine 0 SD
drop table if exists #tmp6_1
Select a.*,
	case 
		 when Conf_Direction in ('Long') then IDR_High
		 when Conf_Direction in ('Short') then IDR_Low
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Green') then IDR_High
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Red') then IDR_Low
	end as [SD0],
	case 
		 when Conf_Direction in ('Long') then convert(decimal(10,2),((IDR_High-DR_High)*-0.1/SD_Size))
		 when Conf_Direction in ('Short') then convert(decimal(10,2),((IDR_Low-DR_High)*0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-DR_High)*-0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-DR_High)*0.1/SD_Size))
	end as [DR_High_SD],

	case 
		 when Conf_Direction in ('Long') then convert(decimal(10,2),((IDR_High-DR_Low)*-0.1/SD_Size))
	     when Conf_Direction in ('Short') then convert(decimal(10,2),((IDR_Low-DR_Low)*0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-DR_Low)*-0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-DR_Low)*0.1/SD_Size))	
	end as [DR_Low_SD],

	case 
		when Conf_Direction in ('Long') then convert(decimal(10,2),((IDR_High-[M7BoxOpen])*-0.1/SD_Size))
		when Conf_Direction in ('Short') then convert(decimal(10,2),((IDR_Low-[M7BoxOpen])*0.1/SD_Size))
		when Conf_Direction in ('No Conf') and [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-[M7BoxOpen])*-0.1/SD_Size))
		when Conf_Direction in ('No Conf') and [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-[M7BoxOpen])*0.1/SD_Size)) 
	end as [M7Box_Open_SD],

	case 
	 	 when Conf_Direction in ('Long') then convert(decimal(10,2),((IDR_High-[M7BoxClose])*-0.1/SD_Size))
		 when Conf_Direction in ('Short') then convert(decimal(10,2),((IDR_Low-[M7BoxClose])*0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-[M7BoxClose])*-0.1/SD_Size))
		 when Conf_Direction in ('No Conf') and [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-[M7BoxClose])*0.1/SD_Size))
	end as [M7Box_Close_SD],

	--for RBC
	case
		when [Box Color] in ('Green') then IDR_High
		when [Box Color] in ('Red') then IDR_Low 
	end as [BoxSD0],

	--Determine open and close by box color for RBC backtesting  --2
	case when [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-[M7BoxOpen])*-0.1/SD_Size))
		 when [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-[M7BoxOpen])*0.1/SD_Size))
	end as [M7Box_Color_Open_SD],

	case when [Box Color] in ('Green') then convert(decimal(10,2),((IDR_High-[M7BoxClose])*-0.1/SD_Size))
		 when [Box Color] in ('Red') then convert(decimal(10,2),((IDR_Low-[M7BoxClose])*0.1/SD_Size))
	end as [M7Box_Color_Close_SD],

	--To determine M7 box position, use Open and close line as if it is always long
	convert(decimal(10,2),((IDR_High-[M7BoxOpen])*-0.1/SD_Size)) as [Raw_OpenSD],
	convert(decimal(10,2),((IDR_High-[M7BoxClose])*-0.1/SD_Size)) as [Raw_CloseSD],

	----Where is 0.5SD
	convert(decimal(10,2),(IDR_High-SD_Size*5)) as [SD-05],

--First Candle Confirmation
	case when First_Conf_Time in ('20:30','04:00','10:30') then 1 else 0 end as FirstCandleConf
into #tmp6_1
from #tmp5 a
--Select top 10 * from #tmp6_1

drop table if exists #tmp6
Select 
	DR_Date,
  --  CASE
  --      WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 1 THEN '1st Week'
   --     WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 2 THEN '2nd Week'
   --     WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 3 THEN '3rd Week'
   --     WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 4 THEN '4th Week'
	--	WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 5 THEN '5th Week'
   --     ELSE 'Other'
   -- END AS week_of_month,
 	case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end as DoW,
	[Session],
	First_Conf_T_DateTime,
	First_Conf_Time,
	Long_Conf_T_DateTime,
	Long_Conf_Time,
	Short_Conf_T_DateTime,
	Short_Conf_Time,
	Conf_Direction,
	[TF Day],
	[False DateTime],
	[False Time],
	[Box Color],
	[M7BoxOpen],
	[M7BoxClose],
	[ExitPrice],
	DR_High,
	IDR_High,
	DR_Low,
	IDR_Low,
	SD_Size,
	SD_tick_Size,
	SD0,
	DR_High_SD,
	DR_Low_SD,
	M7Box_Open_SD,
	M7Box_Close_SD,
	BoxSD0,
	M7Box_Color_Open_SD,
	M7Box_Color_Close_SD,	
	M7Box_SD_Size,
	M7Box_SD_tick_Size,
	Raw_OpenSD,
	Raw_CloseSD,
	[SD-05],
	FirstCandleConf,
	abs([Raw_OpenSD]-[Raw_CloseSD]) as M7BoxSize
into #tmp6
from #tmp6_1

--Select top 100* from #tmp6 where Dow=7


--join original dataset with DR level
drop table if exists #tmp7
Select a.*,
	   b.First_Conf_T_DateTime,
	   b.First_Conf_Time,
	   b.Conf_Direction,
	   b.[TF Day],
	   b.[False DateTime],
	   b.[False Time],
	   b.[Box Color],
	   b.[M7BoxOpen],
	   b.[M7BoxClose],	
	   b.[ExitPrice],
	   b.DR_high,
	   b.IDR_High,
	   b.DR_low,
	   b.IDR_low,
	   b.SD_Size,
	   b.SD_tick_Size,
	   b.SD0,
	   b.DR_High_SD,
	   b.DR_Low_SD,
	   b.M7Box_Open_SD,
	   b.M7Box_Close_SD,
	   b.BoxSD0,
	   b.M7Box_Color_Open_SD, 
	   b.[M7Box_Color_Close_SD],
       b.M7Box_SD_Size,
	   b.M7Box_SD_tick_Size,
	   b.Raw_OpenSD,
	   b.Raw_CloseSD,
	   b.[SD-05],
	   b.FirstCandleConf,
	   b.M7BoxSize --2
	into #tmp7
	from #tmp2 a
		left join #tmp6 b
	on a.[DR_date]=b.[DR_date] and a.[session]=b.[session]

--Select top 10 * from #tmp2

--Select * from #tmp6 where DR_date='2024-12-16'


/***************************************/
/*Figure out original dataset by SD*/
/*use #tmp7*/

drop table if exists #SDPlot
Select 
	T_DateTime,
	Dateonly,
	Timeonly,
	[Session],
	DR_Box,
	DR_date,
	[Open],
	[High],
	[Low],
	[Close],
	--SD assume long direction. for short, just use 1-
	convert(decimal(10,2),([Open]-[IDR_high])/-SD_Size*10) as [Candle_Open_SD],
	convert(decimal(10,2),([High]-[IDR_high])/-SD_Size*10) as [Candle_High_SD],  
	convert(decimal(10,2),([Low]-[IDR_high])/-SD_Size*10) as [Candle_Low_SD],                                  
	convert(decimal(10,2),([Close]-[IDR_high])/-SD_Size*10) as [Candle_Close_SD], 
	Volume,
	[Candle_Color],
	First_Conf_T_DateTime,
	First_Conf_Time,
	Conf_Direction,
	[TF Day],
	[False Time],
	[Box Color],
	M7BoxOpen,
	M7BoxClose,
	[ExitPrice],
	DR_high,
	IDR_high,
	DR_Low,
	IDR_Low,
	SD_Size,
	SD_tick_Size,
	SD0,	
	DR_High_SD,
	DR_Low_SD,
	M7Box_Open_SD,	
	M7Box_Close_SD, 
	BoxSD0,
	M7Box_Color_Open_SD,--2
	M7Box_Color_Close_SD, 
	M7Box_SD_Size,
	M7Box_SD_tick_Size,
	Raw_OpenSD,
	Raw_CloseSD,
	[SD-05],
	FirstCandleConf,--2
	M7BoxSize --2
into #SDPlot
from #tmp7
--Select top 100 * from #SDPlot order by TradingDateTime desc
--Select *,floor(Candle_Close_SD*10)/10 as round_down_close from #SDPlot where [Session]='RDR' and [Box Color]='Green' and DR_Box='Other' order by TradingDateTime desc

drop table if exists #SDPlotsub
Select * into #SDPlotsub from #SDPlot where [Session]='RDR' and [Box Color]='Green' and DR_Box='Other' order by T_DateTime desc

drop table if exists #CTE
Select Timeonly,
	Candle_Close_SD,
	row_number() over (Partition by Timeonly order by Candle_Close_SD) as row_num,
	count(*) over (Partition by Timeonly) as total_count
into #CTE
from #SDPlotsub

--80 percentile

drop table if exists #80_percentile
Select Timeonly,	
	min(Candle_Close_SD) as percentile_80_price
	into #80_percentile
from #CTE
where row_num>=0.8*total_count
group by Timeonly
order by Timeonly

--20 percentile
drop table if exists #20_percentile
Select Timeonly,
	min(Candle_Close_SD) as percentile_20_price
	into #20_percentile
	from #CTE
where row_num>=0.2*total_count
group by Timeonly
order by Timeonly

Select * from #20_percentile

--Mode
drop table if exists #Mode
Select Timeonly,
	Candle_Close_SD as mode_price
into #Mode
from (
	Select
		Timeonly,
		Candle_Close_SD,
		count(*) as count,
		row_number() over (partition by Timeonly order by count(*) desc) as rn
	from #SDPlotsub
group by Timeonly, Candle_Close_SD) subquery
where rn=1
order by Timeonly;

--Median
drop table if exists #MedianSD
Select 
	Timeonly,
	avg(Candle_Close_SD) as median_SD
	into #MedianSD
	from #CTE
where row_num in (
	 (total_count+1)/2,
  (total_count+2)/2
)
group by Timeonly
order by Timeonly;

--Average
drop table if exists #AverageSD
Select 
	Timeonly,	
	Avg(Candle_Close_SD) as average_SD
into #AverageSD
from #SDPlotsub
group by Timeonly
order by Timeonly

--Join into 1 table
Select a.*,b.median_SD,c.mode_price,d.percentile_20_price,e.percentile_80_price
from #AverageSD a
left join #MedianSD b
on a.Timeonly=b.Timeonly
left join #Mode c
on a.Timeonly=c.Timeonly
left join #20_percentile d
on a.Timeonly=d.Timeonly
left join #80_percentile e
on a.Timeonly=e.Timeonly


/*************/
/*BrokenTime*/
/************/

drop table if exists #Mid01
Select DR_date,[Session],[SD-05]
	into #Mid01
from #tmp7
where [session] in ('ADR','ODR','RDR')
group by DR_date,[session],[SD-05]

drop table if exists #Mid02
Select DR_Date,
	 max(case when [session]='ADR' then [SD-05] else null end) as ADR_Mid,
	 max(case when [session]='ODR' then [SD-05] else null end) as ODR_Mid,
	 max(case when [session]='RDR' then [SD-05] else null end) as RDR_Mid
into #Mid02
from #Mid01
group by DR_date

--Join original dataset and normalize candle open and close as 1 direction range base on value

drop table if exists #Mid03
Select a.*,b.ADR_Mid,b.ODR_Mid,b.RDR_Mid,
	case when a.Candle_Color = 'Red Candle' then a.[Open] else a.[Close] end as CandleCloseH,
	case when a.Candle_Color = 'Red Candle' then a.[Close] else a.[Open] end as CandleCloseL
into #Mid03 
from #tmp7 a
left join #Mid02 b
on a.DR_Date=b.DR_Date

--Find crossover time
--'With' clause must run as a standalone block
--cannot contain comments inside the block

Drop table if exists #Broken01;
With ADRBrokenTimes as (
	Select
		DR_date,
		T_DateTime,
		Timeonly,
		[session],
		DR_Box,
		row_number() over (partition by DR_date order by T_DateTime) as row_num
from #Mid03
where (Timeonly between '02:00:00' and '18:00:00') and (ADR_Mid between [Low] and [High])
), 
FirstADRBrokenTime as (
	Select 
		DR_date,
		T_DateTime,
		Timeonly as ADR_Broken,
		[session] as ADR_Broken_session,
		DR_Box as ADR_Broken_Box
from ADRBrokenTimes 
where row_num=1),

ODRBrokenTimes as(
	Select
		DR_date,
		T_DateTime,
		Timeonly,
		[session],
		DR_Box,
		row_number() over(partition by DR_date order by T_DateTime) as row_num
from #Mid03
where (Timeonly between '08:30:00' and '18:00:00') and (ODR_Mid between [Low] and [High])
),
FirstODRBrokenTime as (
	Select 
		DR_date,
		T_DateTime,
		Timeonly as ODR_Broken,
		[session] as ODR_Broken_session,
		DR_Box as ODR_Broken_Box
from ODRBrokenTimes 
where row_num=1)

Select a.DR_date,a.ADR_Broken, a.ADR_Broken_session,a.ADR_Broken_Box,
		b.ODR_Broken, b.ODR_Broken_session,b.ODR_Broken_Box
	into #Broken01
from FirstADRBrokenTime a
left join FirstODRBrokenTime b
on a.DR_date=b.DR_date

--Add broken info to dailyinfo dataset
--Select top 100 * from #Broken01

drop table if exists #DailyInfo01_1

Select a.*,b.ADR_Broken, b.ADR_Broken_session,b.ADR_Broken_Box,
	   b.ODR_Broken, b.ODR_Broken_session,b.ODR_Broken_Box
	into #DailyInfo01_1
from #tmp6 a
left join #Broken01 b          
on a.DR_date=b.DR_date

--Select top 100 * from #DailyInfo01_1 order by DR_date desc

--Consolidate the broken columns
drop table if exists #DailyInfo01

Select
	DR_date,
	DoW,
	[Session],
	Concat(
		Floor((cast(left(convert(varchar,First_Conf_Time),2) as integer)*60+cast(substring(convert(varchar,First_Conf_Time),4,2) as integer))/15)*15/60,
		':',
		right(concat('0',floor((cast(left(convert(varchar,First_Conf_Time),2) as integer)*60+cast(substring(convert(varchar,First_Conf_Time),4,2) as integer))/15)*15%60),2),
		' - ',
		Floor((cast(left(convert(varchar,First_Conf_Time),2) as integer)*60+cast(substring(convert(varchar,First_Conf_Time),4,2) as integer)+15)/15)*15/60,
		':',
		right(concat('0',floor((cast(left(convert(varchar,First_Conf_Time),2) as integer)*60+cast(substring(convert(varchar,First_Conf_Time),4,2) as integer)+15)/15)*15%60),2)) as Conf_bucket,
	First_Conf_T_DateTime,
	First_Conf_Time,
	Long_Conf_T_DateTime,
	Long_Conf_Time,
	Short_Conf_T_DateTime,
	Short_Conf_Time,
	Conf_Direction,
	[TF Day],
	[False DateTime],
	[False Time],
	[Box Color],
	[M7BoxOpen],
	[M7BoxClose],
	DR_High,
	IDR_High,
	DR_Low,
	IDR_Low,
	SD_Size,
	SD_tick_Size,
	SD0,
	DR_High_SD,
	DR_Low_SD,
	M7Box_Open_SD,
	M7Box_Close_SD,
	BoxSD0,
	M7Box_Color_Open_SD,--2
	M7Box_Color_Close_SD,
	M7Box_SD_Size,
	M7Box_SD_tick_Size,
	Raw_OpenSD,
	Raw_CloseSD,
	[SD-05],
	FirstCandleConf,
	M7BoxSize,
	ADR_Broken,
	ADR_Broken_session,
	ADR_Broken_Box,
	case 
		when ADR_Broken_Box is null then 'ADR_notBroken'
		when ADR_Broken_Box='Other' then ADR_Broken_session
		else ADR_Broken_Box end as ADR_Broken_Type,
	ODR_Broken,
	ODR_Broken_session,
	ODR_Broken_Box,
	case 
		when ODR_Broken_Box is null then 'ODR_notBroken'
		when ODR_Broken_Box='Other' then ODR_Broken_session
		else ODR_Broken_Box end as ODR_Broken_Type
into #DailyInfo01
from #DailyInfo01_1

--Select top 100* from #DailyInfo01

/********************/
/********Model*******/

drop table if exists #Model01
Select DR_date, datename(weekday,DR_date) as day_of_week,
		case 
			when datename(weekday,DR_date)='Monday' then dateadd(day,-3,DR_date)
 			else dateadd(day,-1,DR_date) end as Dummydate,
		[Session],DR_High,DR_Low,IDR_High,IDR_Low,[SD-05]
into #Model01
from #DailyInfo01

--Select top 100 * from #Model01 order by DR_Date 
drop table if exists #Model02
Select DR_Date,datename(weekday,DR_date) as day_of_week,
		max(case when [session]='ADR' then [SD-05] else NULL end) as ADR_Mid,
	    max(case when [session]='ODR' then [SD-05] else NULL end) as ODR_Mid,
		max(case when [session]='RDR' then [SD-05] else NULL end) as RDR_Mid
into #Model02
from #Model01
group by DR_date

--Select top 10* from #Model02

--Add mid point critical to deciding model type. i.e if ODR, use ADR as determining point
--If weekday is Monday, then use Friday midpoint

drop table if exists #Model03
Select a.DR_date, a.day_of_week, a.Dummydate,[Session],a.DR_High,a.DR_Low, 
	a.IDR_High, a.IDR_Low, a.[SD-05],
	b.ADR_Mid,b.ODR_Mid,b.RDR_Mid,
	c.RDR_Mid as RDR_Mid_Previous_Day,
	case when a.[session]='ADR' then c.RDR_Mid
	     when a.[session]='ODR' then b.ADR_Mid
		 when a.[session]='RDR' then b.ODR_Mid
	end as [Critical_Mid], 

	case when a.[session]='ADR' then f.DR_High
	     when a.[session]='ODR' then d.DR_High
		 when a.[session]='RDR' then e.DR_High
	end as [Critical_DR_High],

	case when a.[session]='ADR' then f.DR_Low
	     when a.[session]='ODR' then d.DR_Low
		 when a.[session]='RDR' then e.DR_Low
	end as [Critical_DR_Low],
	
	case when a.[session]='ADR' then f.IDR_High
	     when a.[session]='ODR' then d.IDR_High
		 when a.[session]='RDR' then e.IDR_High
	end as [Critical_IDR_High],

	case when a.[session]='ADR' then f.IDR_Low
	     when a.[session]='ODR' then d.IDR_Low
		 when a.[session]='RDR' then e.IDR_Low
	end as [Critical_IDR_Low]

into #Model03
from #Model01 a
left join #Model02 b
on a.DR_Date=b.DR_Date
left join
	(Select DR_date,RDR_Mid from #Model02) c
on a.Dummydate=c.DR_date
left join
	(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] 
		from #Model01 
		where [Session]='ADR')d
	on a.DR_date=d.DR_date
left join
(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] 
		from #Model01 
		where [Session]='ODR')e
	on a.DR_date=e.DR_date
left join
(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] 
		from #Model01 
		where [Session]='RDR')f   --from RDR to ADR model, we need to use previous day RDR
	on a.Dummydate=f.DR_date

--Select top 100 * from #Model03 order by DR_Date,[Session]

--Determine the different model
drop table if exists #Model04
Select a.*,
	case 
		when [IDR_High]<=[Critical_IDR_Low] then 'DXP'
		when [IDR_High]<=[Critical_Mid] and [IDR_High]>[Critical_IDR_Low] then 'DX'
		when [IDR_Low]>=[Critical_IDR_High] then 'UXP'
		when [IDR_Low]>=[Critical_Mid] and [IDR_Low]<[Critical_IDR_High] then 'UX'
		when [IDR_High]>[Critical_IDR_High] and [IDR_Low]<[Critical_IDR_Low] then 'RX'
		when [IDR_High]>=[Critical_IDR_High] and [IDR_Low]>[Critical_IDR_Low] and [IDR_Low]<[Critical_Mid] then 'U'
		when [IDR_Low]<=[Critical_IDR_Low] and [IDR_High]<[Critical_IDR_High] and [IDR_High]>[Critical_Mid] then 'D'
		when [IDR_High]<=[Critical_IDR_High] and [IDR_Low]>=[Critical_IDR_Low] then 'RC'
else 'NoModel' end as Model
into #Model04
from #Model03 a

--Select top 100 * from #Model04 order by DR_Date,[Session]

drop table if exists #DailyInfo02
Select a.*,b.Model
	into #DailyInfo02
	from #DailyInfo01 a
left join #Model04 b
on a.[DR_Date]=b.[DR_Date] and a.[Session]=b.[Session] 

--Select top 100 * from #DailyInfo02 order by DR_Date,[Session]

--To calculate if there is a close above/below M7 box, can it still confirm into the direction of the box color
--Has any close ever violated RBC box color
--Find crossover time

Drop table if exists #M7GreenBrokenTimes
Select
	DR_date,
	T_DateTime,
	Timeonly,
	[session],
	DR_Box,
row_number() over (partition by DR_date,[Session] order by T_DateTime) as row_num
into #M7GreenBrokenTimes
from #tmp7
where (T_DateTime<First_Conf_T_DateTime) and [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color]='Green' and [Close]<[M7BoxOpen]

Drop table if exists #FirstM7GreenBroken
Select
	DR_date,
	T_DateTime as M7_Brokendatetime,
	Timeonly as M7_Broken,
	[Session],
	DR_Box
into #FirstM7GreenBroken
from #M7GreenBrokenTimes
where row_num=1

Drop table if exists #M7RedBrokenTimes
Select
	DR_date,
	T_DateTime,
	Timeonly,
	[session],
	DR_Box,
	row_number() over (partition by DR_date,[Session] order by T_DateTime) as row_num
into #M7RedBrokenTimes
from #tmp7
where (T_DateTime<First_Conf_T_DateTime) and [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color]='Red' and [Close]>[M7BoxOpen]

Drop table if exists #FirstM7RedBroken
Select
	DR_date,
	T_DateTime as M7_Brokendatetime,
	Timeonly as M7_Broken,
	[Session],
	DR_Box
into #FirstM7RedBroken
from #M7RedBrokenTimes
where row_num=1

drop table if exists #M7Broken01
Select DR_date,DR_Box,[session],M7_Broken
	into #M7Broken01
	from #FirstM7GreenBroken
	union all
Select DR_date,DR_Box,[session],M7_Broken
from #FirstM7RedBroken

--Select top 100* from #M7Broken01
--Select * from #DailyInfo02

drop table if exists #DailyInfo03
Select a.*,b.M7_Broken,
	case when b.M7_Broken is null then 'M7 not broken' else 'M7 broken' end as RBC_M7_Broken
into #DailyInfo03
from #DailyInfo02 a
	left join #M7Broken01 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]

--Select top 100* from #DailyInfo03

--by Color by confirmation
drop table if exists #M7Box_violated1
Select [Box color],Conf_Direction,RBC_M7_Broken, count(DR_Date) as [Days],
	sum(count(DR_Date)) over (partition by [Box Color]) as Box_Color_Count
into #M7Box_violated1
from #DailyInfo03
where [Session]='RDR'
group by [Box Color],Conf_Direction,RBC_M7_Broken

--Select * from #M7Box_violated1
--Calculate %
Select [Box Color],Conf_Direction,RBC_M7_Broken,[Days],[Box_Color_Count],
	ROUND(CAST([Days] AS FLOAT) / CAST([Box_Color_Count] AS FLOAT) * 100, 2) AS [Result]
from #M7Box_violated1


--by Color by confirmation by DoW
drop table if exists #M7Box_violated2
Select [DoW],[Box color],Conf_Direction,RBC_M7_Broken, count(DR_Date) as [Days],
	sum(count(DR_Date)) over (partition by [DoW],[Box Color]) as Box_Color_Count
into #M7Box_violated2
from #DailyInfo03
where [Session]='RDR'
group by [DoW],[Box Color],Conf_Direction,RBC_M7_Broken

--Calculate %
Select [DoW],[Box Color],Conf_Direction,RBC_M7_Broken,[Days],[Box_Color_Count],
	ROUND(CAST([Days] AS FLOAT) / CAST([Box_Color_Count] AS FLOAT) * 100, 2) AS [Result]
from #M7Box_violated2


/***********************************/

/***********************************/
--Add max ext time before False confirmation  --8

drop table if exists #M7ExtLong
Select DR_date,[Session],T_DateTime,Timeonly,[High] as M7_ext,
	row_number() over(partition by [DR_date],[Session] order by [high] desc, T_DateTime asc) as M7_ext_rank
	into #M7ExtLong
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Long' and T_DateTime>=First_Conf_T_DateTime  --8
	and ([TF Day]='T' or ([TF Day]='F' and T_DateTime<[False DateTime]))
group by DR_date,[Session],T_DateTime,Timeonly,[High]

drop table if exists #M7ExtShort
Select DR_date,[Session],T_DateTime,Timeonly,[Low] as M7_ext,
	row_number() over(partition by [DR_date],[Session] order by [Low] asc, T_DateTime asc) as M7_ext_rank
	into #M7ExtShort
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Short' and T_DateTime>=First_Conf_T_DateTime  --8
	and ([TF Day]='T' or ([TF Day]='F' and T_DateTime<[False DateTime]))
group by DR_date,[Session],T_DateTime,Timeonly,[Low]

drop table if exists #M7Ext1

Select * 
into #M7Ext1
from #M7ExtLong where M7_ext_rank=1
union all
Select * from #M7ExtShort where M7_ext_rank = 1

--Actual Max Extension  --8
drop table if exists #ExtLongActual
Select DR_date,[Session],T_DateTime,Timeonly,[High] as actual_max_ext,
	row_number() over(partition by [DR_date],[Session] order by [high] desc, T_DateTime asc) as max_ext_rank
	into #ExtLongActual
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Long' and T_DateTime>=First_Conf_T_DateTime  --8
group by DR_date,[Session],T_DateTime,Timeonly,[High]

drop table if exists #ExtShortActual
Select DR_date,[Session],T_DateTime,Timeonly,[Low] as actual_max_ext,
	row_number() over(partition by [DR_date],[Session] order by [Low] asc, T_DateTime asc) as max_ext_rank
	into #ExtShortActual
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Short' and T_DateTime>=First_Conf_T_DateTime  --8
group by DR_date,[Session],T_DateTime,Timeonly,[Low]

drop table if exists #MaxExtActual--8

Select * 
into #MaxExtActual
from #ExtLongActual where max_ext_rank=1
union all
Select * from #ExtShortActual where max_ext_rank = 1


--Max retracement --8

drop table if exists #Max_ret_Long
Select DR_date,[Session],T_DateTime,Timeonly,[Low] as max_ret, First_Conf_T_DateTime,
	row_number() over(partition by [DR_date],[Session] order by [Low] asc, T_DateTime asc) as max_retracement_rank
	into #Max_ret_Long
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Long' and T_DateTime>= First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[Low],First_Conf_T_DateTime

drop table if exists #Max_ret_Short
Select DR_date,[Session],T_DateTime,Timeonly,[High] as max_ret, First_Conf_T_DateTime,
	row_number() over(partition by [DR_date],[Session] order by [High] desc, T_DateTime asc) as max_retracement_rank
	into #Max_ret_Short
	from #tmp7
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Short' and T_DateTime>= First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[High],First_Conf_T_DateTime


drop table if exists #Max_ret
Select * 
	into #Max_ret
	from #Max_ret_Long where max_retracement_rank=1
union all
Select * from #Max_ret_Short where max_retracement_rank=1

--M7 retracement before False confirmation (M7ext)

drop table if exists #tmp7_1
Select a.*, b.T_DateTime as [M7ExtDateTime],b.Timeonly as [M7ExtTimeonly],b.M7_ext
	into #tmp7_1
	from #tmp7 a
	left join #M7Ext1 b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]

drop table if exists #M7ret_Long

Select DR_date,[Session],T_DateTime,Timeonly,[Low] as M7_retracement, First_Conf_T_DateTime, [M7ExtDateTime],
	row_number() over(partition by [DR_date],[Session] order by [Low] desc, T_DateTime asc) as M7_retracement_rank
	into #M7ret_Long
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Long' and T_DateTime between First_Conf_T_DateTime and [M7ExtDateTime]
	and ([TF Day]='T' or ([TF Day]='F' and T_DateTime<[False DateTime]))
group by DR_date,[Session],T_DateTime,Timeonly,[Low],First_Conf_T_DateTime,[M7ExtDateTime]


drop table if exists #M7ret_Short
Select DR_date,[Session],T_DateTime,Timeonly,[High] as M7_retracement, First_Conf_T_DateTime, [M7ExtDateTime],
	row_number() over(partition by [DR_date],[Session] order by [High] desc, T_DateTime asc) as M7_retracement_rank
	into #M7ret_Short
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and Conf_Direction='Short' and T_DateTime between First_Conf_T_DateTime and [M7ExtDateTime]
	and ([TF Day]='T' or ([TF Day]='F' and T_DateTime<[False DateTime]))
group by DR_date,[Session],T_DateTime,Timeonly,[High],First_Conf_T_DateTime,[M7ExtDateTime]

drop table if exists #M7_retracement
Select * 
	into #M7_retracement
	from #M7ret_Long where M7_retracement_rank=1
union all
Select * from #M7ret_Short where M7_retracement_rank=1

	--Combine M7 retracement with max ext with detail dataset

drop table if exists #DailyInfo04

Select a.*,b.T_DateTime as [M7ExtDateTime],b.Timeonly as [M7ExtTimeonly], b.M7_ext,
	case when a.Conf_Direction in ('Long') then convert(decimal(10,2),((a.IDR_High-b.M7_ext)*-0.1/a.SD_Size))
			when a.Conf_Direction in ('Short') then convert(decimal(10,2),((a.IDR_Low-b.M7_ext)*0.1/a.SD_Size)) end as M7_Ext_SD,
	c.T_DateTime as [M7retDateTime],c.Timeonly as [M7retTimeonly],c.M7_retracement,
	case 
		when a.Conf_Direction in ('Long') then convert(decimal(10,2),((a.IDR_High-c.M7_retracement)*-0.1/a.SD_Size))
		when a.Conf_Direction in ('Short') then convert(decimal(10,2),((a.IDR_Low-c.M7_retracement)*0.1/a.SD_Size)) end as M7_ret_SD,

	d.T_DateTime as [actual_MaxExtDateTime],d.Timeonly as [actual_MaxExtTimeonly],d.actual_max_ext,
	case 
		when a.Conf_Direction in ('Long') then convert(decimal(10,2),((a.IDR_High-d.actual_max_ext)*-0.1/a.SD_Size))
		when a.Conf_Direction in ('Short') then convert(decimal(10,2),((a.IDR_Low-d.actual_max_ext)*0.1/a.SD_Size)) end as Actual_Max_Ext_SD,

	e.T_DateTime as [MaxRetDateTime],e.Timeonly as [MaxRetTimeonly],e.max_ret,
	case 
		when a.Conf_Direction in ('Long') then convert(decimal(10,2),((a.IDR_High-e.max_ret)*-0.1/a.SD_Size))
		when a.Conf_Direction in ('Short') then convert(decimal(10,2),((a.IDR_Low-e.max_ret)*0.1/a.SD_Size)) end as Max_Ret_SD,

	case 
		when a.Conf_Direction in ('Long') and M7_retracement<DR_High then 'Close below DR' --3
		when a.Conf_Direction in ('Short') and M7_retracement>DR_Low then 'Close below DR'
		when a.Conf_Direction in ('No Conf') then 'No Conf'
	else 'DR not broken' end as DR_Broken,
	case 
		when a.Conf_Direction in ('Long') and M7_retracement<IDR_High then 'Close below IDR' --3
		when a.Conf_Direction in ('Short') and M7_retracement>IDR_Low then 'Close below IDR'
		when a.Conf_Direction in ('No Conf') then 'No Conf'
	else 'IDR not broken' end as IDR_Broken
into #DailyInfo04
from #DailyInfo03 a
left join #M7Ext1 b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]
left join #M7_retracement c
on a.DR_Date=c.DR_Date and a.[Session]=c.[Session]
left join #MaxExtActual d
on a.DR_Date=d.DR_Date and a.[Session]=d.[Session]
left join #Max_ret e
on a.DR_Date=e.DR_Date and a.[Session]=e.[Session]											


/**********************/
--Determine the position of M7 Box
--Raw_OpenSD and Raw_CloseSD will be use to determine the position
--In raw sense, all box are assume to be green
--Green Box: Raw Open SD is always smaller (below) Raw Close SD
--Green box mid point = Open+(Close-Open)/2
--Red Box: Raw Close SD is always smaller (below) then Raw Open SD
--Red Box mid point=Close+(Open-Close)/2

drop table if exists #DailyInfo05;
With Raw_Mid as (
	Select a.*,
		case 
			when a.[Box Color]='Green' then a.Raw_OpenSD+((a.Raw_CloseSD-a.Raw_OpenSD)/2)
			when a.[Box Color]='Red' then a.Raw_CloseSD+((a.Raw_OpenSD-a.Raw_CloseSD)/2)
			when a.[Box Color]='Grey' then a.Raw_CloseSD
		end as Raw_Mid_SD
from #DailyInfo04 a
)
Select a.*,
	case
		when a.Raw_CloseSD=-0.5 or a.Raw_OpenSD=-0.5 then 'At 0.5'
		when a.[Box Color]='Green' and a.Raw_CloseSD>-0.5 and a.Raw_OpenSD<-0.5 then '0.5 between Box'
		when a.[Box Color]='Red' and a.Raw_CloseSD<-0.5 and a.Raw_OpenSD>-0.5 then '0.5 between Box'
		when a.[Box Color]='Green' and a.Raw_CloseSD<-0.5 then 'Below 0.5'
		when a.[Box Color]='Red' and a.Raw_OpenSD<-0.5 then 'Below 0.5'
		when a.[Box Color]='Green' and a.Raw_OpenSD>-0.5 then 'Above 0.5'
		when a.[Box Color]='Red' and a.Raw_CloseSD>-0.5 then 'Above 0.5'
		when a.[Box Color]='Grey' and a.Raw_CloseSD<-0.5 then 'Below 0.5'
		when a.[Box Color]='Red' and a.Raw_OpenSD>-0.5 then 'Above 0.5'
end as [Box Position relative to 0.5],
	case
		when a.Raw_Mid_SD>-0.4 then 'Upper'
		when a.Raw_Mid_SD<-0.6 then 'Lower'
else 'Middle'
end as [Box Position]
into #DailyInfo05
from Raw_Mid a;

--Select * from #DailyInfo05

/*******************************/
--Inside M7 Box SD (Wick) --6

drop table if exists #RBC_M7Box_ret_Green
Select DR_date,[Session],T_DateTime,Timeonly,[Low] as RBC_M7Box_retracement, First_Conf_T_DateTime,
	row_number() over(partition by [DR_Date],[Session] order by [Low] asc, T_DateTime asc) as RBC_M7Box_retracement_rank
	into #RBC_M7Box_ret_Green
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and [Box Color]='Green' and T_DateTime<First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[Low],First_Conf_T_DateTime

drop table if exists #RBC_M7Box_ret_Red
Select DR_date,[Session],T_DateTime,Timeonly,[High] as RBC_M7Box_retracement, First_Conf_T_DateTime,
	row_number() over(partition by [DR_Date],[Session] order by [High] desc, T_DateTime asc) as RBC_M7Box_retracement_rank
	into #RBC_M7Box_ret_Red
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and [Box Color]='Red' and T_DateTime<First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[High],First_Conf_T_DateTime


drop table if exists #RBC_M7Box_retracement
Select *
	into #RBC_M7Box_retracement
	from #RBC_M7Box_ret_Green where RBC_M7Box_retracement_rank=1
union all
Select * from #RBC_M7Box_ret_Red where RBC_M7Box_retracement_rank=1

--Select top 100 * from #RBC_M7Box_retracement


/*******************************/
--Inside M7 Box SD (Body Close) --6

drop table if exists #RBC_M7Box_ret_Close_Green
Select DR_date,[Session],T_DateTime,Timeonly,[Close] as RBC_M7Box_Close_ret, First_Conf_T_DateTime,
	row_number() over(partition by [DR_Date],[Session] order by [Close] asc, T_DateTime asc) as RBC_M7Box_retracement_rank
	into #RBC_M7Box_ret_Close_Green
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and [Box Color]='Green' and T_DateTime<First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[Close],First_Conf_T_DateTime


drop table if exists #RBC_M7Box_ret_Close_Red
Select DR_date,[Session],T_DateTime,Timeonly,[Close] as RBC_M7Box_Close_ret, First_Conf_T_DateTime,
	row_number() over(partition by [DR_Date],[Session] order by [Close] desc, T_DateTime asc) as RBC_M7Box_retracement_rank
	into #RBC_M7Box_ret_Close_Red
	from #tmp7_1
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and [Box Color]='Red' and T_DateTime<First_Conf_T_DateTime
group by DR_date,[Session],T_DateTime,Timeonly,[Close],First_Conf_T_DateTime

drop table if exists #RBC_M7Box_Close_ret
Select *
	into #RBC_M7Box_Close_ret
	from #RBC_M7Box_ret_Close_Green where RBC_M7Box_retracement_rank=1
union all
Select * from #RBC_M7Box_ret_Close_Red where RBC_M7Box_retracement_rank=1

--Select top 100* from #RBC_M7Box_Close_ret

--Combine M7 retracement with max ext with detail dataset. M7 retracement category by both wick and close --6

drop table if exists #DailyInfo06_3 --12
Select a.*, 
	((a.[DR_High]-a.[IDR_High])/a.SD_tick_Size)*10 as DR_High_thickness_SD, --9
	((a.[IDR_Low]-a.[DR_Low])/a.SD_tick_Size)*10 as DR_Low_thickness_SD, --9
	b.T_DateTime as [RBC_M7Box_Retracement_DateTime], b.Timeonly as [RBC_M7Box_Retracement_Time],
	case 
		when a.[Box Color] in ('Green') then convert(decimal(10,2),((a.[M7BoxClose]-b.RBC_M7Box_retracement)*-0.1/a.M7Box_SD_Size))
		when a.[Box Color] in ('Red') then convert(decimal(10,2),((a.[M7BoxClose]-b.RBC_M7Box_retracement)*0.1/a.M7Box_SD_Size))
	end as RBC_M7Box_retracement_SD,
--Wick --6
	case 
		when a.[Box Color] in ('Green') and RBC_M7Box_retracement>=[M7BoxOpen] then 'RBC M7 Box not broken'
		when a.[Box Color] in ('Red') and RBC_M7Box_retracement<=[M7BoxOpen] then 'RBC M7 Box not broken'
		when a.[Box Color] in ('Grey') then 'No Box Color'
	else 'RBC M7 Box Broken' end as RBC_M7Box_Broken,
--by candle close --6
	case 
		when a.[Box Color] in ('Green') and c.RBC_M7Box_Close_ret>=[M7BoxOpen] then 'RBC M7Box not broken (Close)'
		when a.[Box Color] in ('Red') and c.RBC_M7Box_Close_ret<=[M7BoxOpen] then 'RBC M7Box not broken (Close)'
		when a.[Box Color] in ('Grey') then 'No Box Color'
	else 'RBC M7Box Broken (Close)' end as RBC_M7Box_Broken_Close,

case 
		when a.[Box Color] in ('Green') and c.RBC_M7Box_Close_ret>=[M7BoxClose] then 'RBC always close outside M7Box'--6
		when a.[Box Color] in ('Red') and c.RBC_M7Box_Close_ret<=[M7BoxClose] then 'RBC always close outside M7Box'--6
		when a.[Box Color] in ('Grey') then 'No Box Color'
	else 'RBC Close inside M7Box' end as RBC_M7Box_CloseOutside
into #DailyInfo06_3 --12
from #DailyInfo05 a
left join #RBC_M7Box_retracement b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]
left join #RBC_M7Box_Close_ret c
on a.DR_Date=c.DR_Date and a.[Session]=c.[Session]

--12
--Transpose model column
drop table if exists #DailyInfo06_4
Select DR_Date,
	MAX(case when [Session]='ADR' then Model end) as ADR_Model,
	MAX(case when [Session]='ODR' then Model end) as ODR_Model,
	MAX(case when [Session]='RDR' then Model end) as RDR_Model
into #DailyInfo06_4
from #DailyInfo06_3
group by DR_Date

drop table if exists #DailyInfo06_1
Select a.*,b.ADR_Model,b.ODR_Model,b.RDR_Model
	into #DailyInfo06_1
	from #DailyInfo06_3 a
left join #DailyInfo06_4 b
on a.DR_date=b.DR_Date


--Select * from #DailyInfo06 where [Session]='RDR' and DoW=3 and Conf_Direction='Long' and [Box Color]='Green'

--Select top 100* from #DailyInfo06_1

drop table if exists #DailyInfo06_2;

With InitialBuckets As( --16
	Select
		*,
    CASE WHEN [M7BoxOpen] > [M7BoxClose] THEN [M7BoxOpen] ELSE [M7BoxClose] END AS [M7Box_Raw_top],
    CASE WHEN [M7BoxOpen] < [M7BoxClose] THEN [M7BoxOpen] ELSE [M7BoxClose] END AS [M7Box_Raw_bottom],
	Floor(DR_High_SD*10)/10+0.1 as DR_High_SD_upper,
	Floor(DR_High_SD*10)/10 as DR_High_SD_lower,

	Floor(DR_Low_SD*10)/10+0.1 as DR_Low_SD_upper,
	Floor(DR_Low_SD*10)/10 as DR_Low_SD_lower,

	Floor(DR_High_thickness_SD*10)/10+0.1 as DR_High_thickness_SD_upper,--9
	Floor(DR_High_thickness_SD*10)/10 as DR_High_thickness_SD_lower,--9

	Floor(DR_Low_thickness_SD*10)/10+0.1 as DR_Low_thickness_SD_upper,--9
	Floor(DR_Low_thickness_SD*10)/10 as DR_Low_thickness_SD_lower,--9


	Floor(M7Box_Open_SD*10)/10+0.1 as M7Box_Open_SD_upper,
	Floor(M7Box_Open_SD*10)/10 as M7Box_Open_SD_lower,

	Floor(M7Box_Close_SD*10)/10+0.1 as M7Box_Close_SD_upper,
	Floor(M7Box_Close_SD*10)/10 as M7Box_Close_SD_lower,

	Floor(M7Box_Color_Open_SD*10)/10+0.1 as M7Box_Color_Open_SD_upper,
	Floor(M7Box_Color_Open_SD*10)/10 as M7Box_Color_Open_SD_lower,

	Floor(M7Box_Color_Close_SD*10)/10+0.1 as M7Box_Color_Close_SD_upper,
	Floor(M7Box_Color_Close_SD*10)/10 as M7Box_Color_Close_SD_lower,

	Floor(Raw_OpenSD*10)/10+0.1 as Raw_OpenSD_upper,
	Floor(Raw_OpenSD*10)/10 as Raw_OpenSD_lower,

	Floor(Raw_CloseSD*10)/10+0.1 as Raw_CloseSD_upper,
	Floor(Raw_CloseSD*10)/10 as Raw_CloseSD_lower,

	Floor(M7BoxSize*10)/10+0.1 as M7BoxSize_upper,
	Floor(M7BoxSize*10)/10 as M7BoxSize_lower,

	Floor(M7_Ext_SD*10)/10+0.1 as M7_Ext_SD_upper,
	Floor(M7_Ext_SD*10)/10 as M7_Ext_SD_lower,

	Floor(M7_ret_SD*10)/10+0.1 as M7_ret_SD_upper,
	Floor(M7_ret_SD*10)/10 as M7_ret_SD_lower,

	Floor(Actual_Max_Ext_SD*10)/10+0.1 as  Actual_Max_Ext_SD_upper,
	Floor(Actual_Max_Ext_SD*10)/10 as Actual_Max_Ext_SD_lower,

	Floor(Max_Ret_SD*10)/10+0.1 as Max_Ret_SD_upper,
	Floor(Max_Ret_SD*10)/10 as Max_Ret_SD_lower,

	Floor(Raw_Mid_SD*10)/10+0.1 as Raw_Mid_SD_upper,
	Floor(Raw_Mid_SD*10)/10 as Raw_Mid_SD_lower,

	Floor(RBC_M7Box_retracement_SD*10)/10+0.1 as RBC_M7Box_retracement_SD_upper,
	Floor(RBC_M7Box_retracement_SD*10)/10 as RBC_M7Box_retracement_SD_lower

	from #DailyInfo06_1
	),
	Buckets AS (
	Select *,
	b.[Open] as [Conf_Candle_Open],
	b.[Close] as [Conf_Candle_Close],
	b.[High] as [Conf_Candle_High],
		b.[Low] as [Conf_Candle_Low],	M7Box_Raw_top-((M7Box_Raw_top-M7Box_Raw_bottom)*0.25) as [M7_0.25],
		M7Box_Raw_top-((M7Box_Raw_top-M7Box_Raw_bottom)*0.5) as [M7_0.5],
		M7Box_Raw_top-((M7Box_Raw_top-M7Box_Raw_bottom)*0.75) as [M7_0.75]
	from InitialBuckets
left join #tmp1 b
on First_Conf_T_DateTime=b.T_DateTime
	)

Select
	[DR_Date],
	[DoW],
	[Session],
	  CASE
        WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 1 THEN '1st Week'
        WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 2 THEN '2nd Week'
        WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 3 THEN '3rd Week'
        WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 4 THEN '4th Week'
		WHEN DATEPART(WEEK, DR_Date) - DATEPART(WEEK, DATEADD(MONTH, DATEDIFF(MONTH, 0, DR_Date), 0)) + 1 = 5 THEN '5th Week'
        ELSE 'Other'
    END AS week_of_month,
	[Conf_bucket],
	left(convert(varchar,[First_Conf_T_DateTime],120),16) as [First_Conf_T_DateTime],
	left(convert(varchar,[First_Conf_Time],108),5) as [First_Conf_Time],

	left(convert(varchar,[Long_Conf_T_DateTime],120),16) as [Long_Conf_T_DateTime],
	left(convert(varchar,[Long_Conf_Time],108),5) as [Long_Conf_Time],

	left(convert(varchar,[Short_Conf_T_DateTime],120),16) as [Short_Conf_T_DateTime],
	left(convert(varchar,[Short_Conf_Time],108),5) as [Short_Conf_Time],

	[Conf_Direction],
	[TF Day],

	left(convert(varchar,[False DateTime],120),16) as [False DateTime],
	left(convert(varchar,[False Time],108),5) as [False Time],

[Conf_Candle_Open],--22
[Conf_Candle_Close],
[Conf_Candle_High],
[Conf_Candle_Low],
case
	when [Conf_Direction]='Long' then [Conf_Candle_Close]-[DR_High]
when [Conf_Direction]='Short' then [DR_Low]- [Conf_Candle_Close]
	end as [Conf_tick_size]
	
	[Box Color],
	case
		when [Box color]='Green' and Conf_Direction = 'Long' then 'Match'
		when [Box color]='Red' and Conf_Direction = 'Short' then 'Match'
		when [Box color]='Grey' then 'No Box Color'
	 when Conf_Direction = 'No Conf' then 'No Conf'
	else 'Not Match' end as [Box_Color_match_Conf_direction],--6

	[M7BoxOpen],
	[M7BoxClose],
	[DR_High],
	[IDR_High],
	[DR_Low],
	[IDR_Low],
	format(DR_High_thickness_SD,'0.00') as DR_High_thickness_SD,--9
	concat(format(DR_High_thickness_SD_lower,'0.00'),'  to ',format(DR_High_thickness_SD_upper,'0.00')) as [DR_High_thickness_SD_Range],--9

	format(DR_Low_thickness_SD,'0.00') as DR_Low_thickness_SD,--9
	concat(format(DR_Low_thickness_SD_lower,'0.00'),'  to ',format(DR_Low_thickness_SD_upper,'0.00')) as [DR_Low_thickness_SD_Range],--9

	[SD_Size],
	[SD_tick_Size],
	[SD0],
	--Determine the top and bottom of M7 box price level to facilitate backtest --13
	[M7Box_Raw_top],--15
	[M7Box_Raw_bottom],
	[M7_0.25],--16
	[M7_0.5],--16
	[M7_0.75],--16

	[DR_High_SD],
	concat(format(DR_High_SD_lower,'0.00'),'  to ',format(DR_High_SD_upper,'0.00')) as [DR_High_SD_Range],
	[DR_Low_SD],

	concat(format(DR_Low_SD_lower,'0.00'),'  to ',format(DR_Low_SD_upper,'0.00')) as [DR_Low_SD_Range],

	[M7Box_Open_SD],
	concat(format(M7Box_Open_SD_lower,'0.00'),'  to ',format(M7Box_Open_SD_upper,'0.00')) as [M7Box_Open_SD_Range],

	[M7Box_Close_SD],
	concat(format(M7Box_Close_SD_lower,'0.00'),'  to ',format(M7Box_Close_SD_upper,'0.00')) as [M7Box_Close_SD_Range],

	[BoxSD0],

	[M7Box_Color_Open_SD],
	concat(format(M7Box_Color_Open_SD_lower,'0.00'),'  to ',format(M7Box_Color_Open_SD_upper,'0.00')) as [M7Box_Color_Open_SD_Range],

	[M7Box_Color_Close_SD],
	concat(format(M7Box_Color_Close_SD_lower,'0.00'),'  to ',format(M7Box_Color_Close_SD_upper,'0.00')) as [M7Box_Color_Close_SD_Range],

	[M7Box_SD_Size],
	[M7Box_SD_tick_Size],

	[Raw_OpenSD],
	concat(format(Raw_OpenSD_lower,'0.00'),'  to ',format(Raw_OpenSD_upper,'0.00')) as [Raw_OpenSD_Range],

	[Raw_CloseSD],
	concat(format(Raw_CloseSD_lower,'0.00'),'  to ',format(Raw_CloseSD_upper,'0.00')) as [Raw_CloseSD_Range],

	[SD-05],
	[FirstCandleConf],

	[M7BoxSize],
	concat(format(M7BoxSize_lower,'0.00'),'  to ',format(M7BoxSize_upper,'0.00')) as [M7BoxSize_Range],

	left(convert(varchar,[ADR_Broken],108),5) as [ADR_Broken],
	[ADR_Broken_session],
	[ADR_Broken_Box],
	[ADR_Broken_Type],

	left(convert(varchar,[ODR_Broken],108),5) as [ODR_Broken],
	[ODR_Broken_session],
	[ODR_Broken_Box],
	[ODR_Broken_Type],

	[Model],
	[ADR_Model],--12
	[ODR_Model],--12
	[RDR_Model],--12

	left(convert(varchar,[M7_Broken],108),5) as [M7_Broken],
	[RBC_M7_Broken],

	left(convert(varchar,[MaxRetDateTime],120),16) as [MaxRetDateTime],
	left(convert(varchar,[MaxRetTimeonly],108),5) as [MaxRetTimeonly],
	[Max_Ret],
	[Max_Ret_SD],
	concat(format(Max_Ret_SD_lower,'0.00'),'  to ',format(Max_Ret_SD_upper,'0.00')) as [Max_Ret_SD_Range],

	case
		when Conf_Direction='Long' and Max_Ret>=[M7Box_Raw_top] then 'Above M7Box'
		when Conf_Direction='Long' and Max_Ret<[M7Box_Raw_top] and Max_ret>=[M7Box_Raw_bottom]  then 'Inside M7Box'
		when Conf_Direction='Long' and Max_Ret<[M7Box_Raw_bottom] then 'Below M7Box' 

		when Conf_Direction='Short' and Max_Ret<=[M7Box_Raw_bottom] then 'Above M7Box'
		when Conf_Direction='Short' and Max_Ret>[M7Box_Raw_bottom] and Max_ret<=[M7Box_Raw_top]  then 'Inside M7Box'
		when Conf_Direction='Short' and Max_Ret>[M7Box_Raw_top] then 'Below M7Box'
		when Conf_Direction='No Conf' then 'No Conf'
	end as [Max_ret_M7box_pos_conf_base],
	
	case --16
		when Conf_Direction='Long' and Max_Ret>=[M7Box_Raw_top] then 'Above M7Box'
		when Conf_Direction='Long' and Max_Ret<[M7Box_Raw_top] and Max_ret>=[M7_0.5]  then 'Inside M7Box (above M7Box0.5)'
		when Conf_Direction='Long' and Max_Ret<[M7_0.5] and Max_ret>=[M7Box_Raw_bottom]  then 'Inside M7Box (below M7Box0.5)'
		when Conf_Direction='Long' and Max_Ret<[M7Box_Raw_bottom] then 'Below M7Box' 

		when Conf_Direction='Short' and Max_Ret<=[M7Box_Raw_bottom] then 'Above M7Box'
		when Conf_Direction='Short' and Max_Ret>[M7Box_Raw_bottom] and Max_ret<=[M7_0.5]  then 'Inside M7Box (above M7Box0.5)'
		when Conf_Direction='Short' and Max_Ret>[M7_0.5] and Max_ret<=[M7Box_Raw_top]  then 'Inside M7Box (below M7Box0.5)'
		when Conf_Direction='Short' and Max_Ret>[M7Box_Raw_top] then 'Below M7Box'
		when Conf_Direction='No Conf' then 'No Conf'
	end as [Max_ret_M7box_0.5_conf_base],


	left(convert(varchar,[M7ExtDateTime],120),16) as [M7ExtDateTime],
	left(convert(varchar,[M7ExtTimeonly],108),5) as [M7ExtTimeonly],
	[M7_ext],
	[M7_Ext_SD],
	concat(format(M7_Ext_SD_lower,'0.00'),'  to ',format(M7_Ext_SD_upper,'0.00')) as [M7_Ext_SD_Range],



	left(convert(varchar,[M7retDateTime],120),16) as [M7retDateTime],
	left(convert(varchar,[M7retTimeonly],108),5) as [M7retTimeonly],
	[M7_retracement],
	[M7_ret_SD],
	concat(format(M7_ret_SD_lower,'0.00'),'  to ',format(M7_ret_SD_upper,'0.00')) as [M7_ret_SD_Range],
	case--16
		when Conf_Direction='Long' and [M7_retracement]>=[M7Box_Raw_top] then 'Above M7Box'
		when Conf_Direction='Long' and [M7_retracement]<[M7Box_Raw_top] and [M7_retracement]>=[M7Box_Raw_bottom]  then 'Inside M7Box'
		when Conf_Direction='Long' and [M7_retracement]<[M7Box_Raw_bottom] then 'Below M7Box' 

		when Conf_Direction='Short' and [M7_retracement]<=[M7Box_Raw_bottom] then 'Above M7Box'
		when Conf_Direction='Short' and [M7_retracement]>[M7Box_Raw_bottom] and [M7_retracement]<=[M7Box_Raw_top]  then 'Inside M7Box'
		when Conf_Direction='Short' and [M7_retracement]>[M7Box_Raw_top] then 'Below M7Box'
		when Conf_Direction='No Conf' then 'No Conf'
	end as [M7ret_M7box_pos_conf_base],
	
	case --16
		when Conf_Direction='Long' and [M7_retracement]>=[M7Box_Raw_top] then 'Above M7Box'
		when Conf_Direction='Long' and [M7_retracement]<[M7Box_Raw_top] and [M7_retracement]>=[M7_0.5]  then 'Inside M7Box (above M7Box0.5)'
		when Conf_Direction='Long' and [M7_retracement]<[M7_0.5] and [M7_retracement]>=[M7Box_Raw_bottom]  then 'Inside M7Box (below M7Box0.5)'
		when Conf_Direction='Long' and [M7_retracement]<[M7Box_Raw_bottom] then 'Below M7Box' 

		when Conf_Direction='Short' and [M7_retracement]<=[M7Box_Raw_bottom] then 'Above M7Box'
		when Conf_Direction='Short' and [M7_retracement]>[M7Box_Raw_bottom] and [M7_retracement]<=[M7_0.5]  then 'Inside M7Box (above M7Box0.5)'
		when Conf_Direction='Short' and [M7_retracement]>[M7_0.5] and [M7_retracement]<=[M7Box_Raw_top]  then 'Inside M7Box (below M7Box0.5)'
		when Conf_Direction='Short' and [M7_retracement]>[M7Box_Raw_top] then 'Below M7Box'
		when Conf_Direction='No Conf' then 'No Conf'
	end as [M7ret_M7box_0.5_conf_base],


	left(convert(varchar,[actual_MaxExtDateTime],120),16) as [Actual_MaxExtDateTime],
	left(convert(varchar,[actual_MaxExtTimeonly],108),5) as [Actual_MaxExtTimeonly],
	[Actual_Max_ext],
	[Actual_Max_Ext_SD],
	concat(format(Actual_Max_Ext_SD_lower,'0.00'),'  to ',format(Actual_Max_Ext_SD_upper,'0.00')) as [Actual_Max_Ext_SD_Range],

	[DR_Broken],
	[IDR_Broken],
	format([Raw_Mid_SD],'0.00') as [Raw_Mid_SD],

	concat(format(Raw_Mid_SD_lower,'0.00'),'  to ',format(Raw_Mid_SD_upper,'0.00')) as [Raw_Mid_SD_Range],

	[Box Position Relative to 0.5],
	[Box Position],

	left(convert(varchar,[RBC_M7Box_Retracement_DateTime],120),16) as [RBC_M7Box_Retracement_DateTime],
	left(convert(varchar,[RBC_M7Box_Retracement_Time],108),5) as [RBC_M7Box_Retracement_Time],

	[RBC_M7Box_Retracement_SD],
	concat(format(RBC_M7Box_Retracement_SD_lower,'0.00'),'  to ',format(RBC_M7Box_Retracement_SD_upper,'0.00')) as [RBC_M7Box_Retracement_SD_Range],

	--15 --RBC study 
	--Define 0%, 25%, 50%, 75% and 100% 
	case 
		when RBC_M7Box_Retracement_SD>0 then 'Above RBC' 
		when RBC_M7Box_Retracement_SD<0 and RBC_M7Box_Retracement_SD>-0.25 then '0<RBC_ret<0.25' 
		when RBC_M7Box_Retracement_SD<=-0.25 and RBC_M7Box_Retracement_SD>-0.5 then '0.25<=RBC_ret<0.5' 
		when RBC_M7Box_Retracement_SD<=-0.5 and RBC_M7Box_Retracement_SD>-0.75 then '0.5<=RBC_ret<0.75' 
		when RBC_M7Box_Retracement_SD<=-0.75 and RBC_M7Box_Retracement_SD>=-1 then '0.75<=RBC_ret<=1' 
		when RBC_M7Box_Retracement_SD<-1 then 'Below RBC' 
	else 'sth wrong' end as RBC_M7Box_Retracement_quadrant,

	[RBC_M7Box_Broken],--6
	[RBC_M7Box_Broken_Close],
	[RBC_M7Box_CloseOutside]
into #DailyInfo06_2
from Buckets;

Select count(DR_Date) from #DailyInfo06

drop table if exists #DailyInfo06
Select a.*,b.Event,c.Event as FOMC  
	into #DailyInfo06
	from #DailyInfo06_2 a
	left JOIN
(Select * from [dbo].[CL_Events] where [Event]!='FOMC' group by [Date],[Event]) b
on a.DR_Date=b.Date
	left JOIN
(Select * from [dbo].[CL_Events] where [Event]='FOMC'group by [Date],[Event]) c --22
on a.DR_Date=c.Date

drop table if exists  Futures.dbo.CLDailyInfo
Select * into Futures.dbo.CLDailyInfo from #DailyInfo06


Select * from #tmp1 where TradingDateTime>='2008-08-31' and TradingDateTime<='2008-09-01'
--Summaries --6
Select [Session],RBC_M7Box_Broken,RBC_M7Box_Broken_Close,
	count(DR_date)
from #DailyInfo06 b
group by [Session],RBC_M7Box_Broken,RBC_M7Box_Broken_Close

Select [Session],RBC_M7Box_Broken,RBC_M7Box_Broken_Close,Box_Color_match_Conf_direction,M7BoxSize_Range,
	count(DR_date)
from #DailyInfo06
group by [Session],RBC_M7Box_Broken,RBC_M7Box_Broken_Close,Box_Color_match_Conf_direction,M7BoxSize_Range

Select [Session],[DoW],Conf_Direction,[M7Box_Color_Close_SD_Range],[Box_Color_Match_Conf_direction],count(DR_date)
	from #DailyInfo06
group by [Session],[DoW],Conf_Direction,[M7Box_Color_Close_SD_Range],[Box_Color_Match_Conf_direction]


Select * from #DailyInfo06 where First_Conf_Time in ('20:55','04:40','10:30') and DR_Date>='2023-01-01'order by DR_Date desc
Select DR_Date, ext, IDR_high-IDR_low as Range_Size from Futures.dbo.CLDailyInfo where Session in ('RDR') 
group by DR_Date, IDR_high-IDR_low 
having IDR_high-IDR_low > 1.5

--False day in relation to M7 box study
Select [Box_Color_match_Conf_direction],[Box Color],[TF Day], M7Box_Close_SD_Range, count(DR_Date) from #DailyInfo06 
	where max_ret_SD<=-0.7 and [Session]='RDR' 
group by [Box_Color_match_Conf_direction],[Box Color],[TF Day],M7Box_Close_SD_Range
order by [Box_Color_match_Conf_direction],[TF Day] --12

Select top 100 * from #DailyInfo06 where max_ret_SD>=1 order by DR_date desc

Select [Session],[TF Day], 
	case 
		when Max_Ret_SD < M7Box_Close_SD then 'Below M7Box' 
		when Max_Ret_SD < M7Box_Open_SD and Max_Ret_SD >= M7Box_Close_SD then 'Inside M7Box' 
		when Max_Ret_SD >= M7Box_Open_SD then 'Above M7Box' end as [Price Position], 
		count (DR_date) as [Days count] 
		from #DailyInfo06 
		where Conf_Direction not in ('No Conf') 
	group by [Session],[TF Day], 
		case when Max_Ret_SD < M7Box_Close_SD then 'Below M7Box' 
			 when Max_Ret_SD < M7Box_Open_SD and Max_Ret_SD >= M7Box_Close_SD then 'Inside M7Box' 
			 when Max_Ret_SD >= M7Box_Open_SD then 'Above M7Box' end order by [Session]
drop table if exists [dbo].tmp7 
Select * into [Futures].[dbo].tmp7 from #tmp7
/****************************************************************************************************************************************************************/
/************Backtesting************/
-- Backtest 1
--Testing sucess rate at DR entry
drop table if exists #tmp8_1

Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);
set @SD_Target=1.0;
set @SD_SL=-0.2;
set @plus_tick=3;

Select a.*,[DR_High_SD] as [Entry_SD],
		[DR_high] as [Entry],
		case when [DR_high] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
		[SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
		case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
		[SD0]+(@SD_Target*10*SD_Size) as [TP],
		case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
	into #tmp8_1
	from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
	union all
Select a.*, [DR_Low_SD] as [Entry_SD],
	[DR_Low] as [Entry],
	case when [DR_Low] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
	[SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
	case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[SD0]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short')

--Continue to part always same
/*****************************************/
--Backtest 2
--Backtest by Retirement setup
--SL IDR low + 3 ticks

drop table if exists #tmp8_1;

Declare @SD_Target decimal(4,2);
Declare @plus_tick decimal(4,2);
Declare @Entry decimal(4,2);

set @SD_Target = 1.5;
set @plus_tick = 3;
set @Entry = -0.7;  -- Change as needed

-- Long Positions
Select a.*, @Entry as [Entry_SD],
    [SD0] + (@Entry * 10 * [SD_Size]) as [Entry],
    case when [SD0] + (@Entry * 10 * [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
    [DR_Low] - (0.01 * @plus_tick) as [SL],
    case when [Low] <= ([DR_Low] - (0.01 * @plus_tick)) then 1 else 0 end as [SL_hit],
    [SD0] + (@SD_Target * 10 * SD_Size) as [TP],
    case when [High] >= ([SD0] + (@SD_Target * 10 * SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8_1
from #tmp7 a
where [Session] in ('ADR', 'ODR', 'RDR') 
  and DR_Box = 'Other' 
  and T_DateTime > [First_Conf_T_DateTime] 
  and Conf_Direction = 'Long'
union all
-- Short Positions
Select a.*, @Entry as [Entry_SD], 
    [SD0] - (@Entry * 10 * [SD_Size]) as [Entry],
    case when [SD0] - (@Entry * 10 * [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
    [DR_High] + (0.01 * @plus_tick) as [SL],
    case when [High] >= ([DR_High] + (0.01 * @plus_tick)) then 1 else 0 end as [SL_hit],
    [SD0] - (@SD_Target * 10 * SD_Size) as [TP],
    case when [Low] <= ([SD0] - (@SD_Target * 10 * SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR', 'ODR', 'RDR') 
  and DR_Box = 'Other' 
  and T_DateTime > [First_Conf_T_DateTime] 
  and Conf_Direction = 'Short';

  Select * from #tmp8_1 where DR_date = '2021-02-15' and [Session] = 'RDR'

--Part always same

/***BackTest by SD **/

drop table if exists #tmp8_1

Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);
Declare @Entry decimal(4,2);
set @SD_Target=1.4;
set @SD_SL=-0.3;  --Change as needed
set @plus_tick=3;
set @Entry=0  --Change as needed

Select a.*,@Entry as [Entry_SD],
		[SD0]+(@Entry*10* [SD_Size]) as [Entry],
		case when [SD0]+(@Entry*10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
		[SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
		case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
		[SD0]+(@SD_Target*10*SD_Size) as [TP],
		case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
	into #tmp8_1
	from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
	union all
Select a.*,@Entry as [Entry_SD],
	[SD0] - (@Entry* [SD_Size]) as [Entry],
	case when [SD0] - (@Entry * 10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
	[SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
	case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[SD0]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short')

--Part always same


/************************/
--RBC backtest 1
--All entry will be base on box color
--Immediate entry at M7Box close. 
--SL 3 ticks above/below the 0.9 SD

drop table if exists #tmp8_1

--Declare @SD_Entry decimal(4,2);
Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);

set @SD_Target=1.0;
set @SD_SL=-0.9;
set @plus_tick=3;
--set @SD_Entry=(Select[SessionClose] from #tmp7);

--Entry must be in the body of the session
--Entry must be before confirmation, otherwise no entry

Select a.*,[M7Box_Color_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[IDR_High]+(@SD_SL*10*[SD_Size])-(0.01*@plus_tick) as [SL],
	case when [Low] <=([IDR_high]+(@SD_SL*10*[SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_high]+(@SD_Target*10*SD_Size) as [TP],
	case when [High]>=([IDR_high]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8_1
from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') and [M7Box_Color_Close_SD]>=-0.8
union all 
Select a.*,[M7Box_Color_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[IDR_Low]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick) as [SL],
	case when [High] >=([IDR_Low]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') and [M7Box_Color_Close_SD]>=-0.8
union all 
Select a.*,[M7Box_Color_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[M7BoxClose]+(10*[SD_Size])-(0.01*@plus_tick) as [SL],--if close below -0.8, then use 1SD+3tick as SL
	case when [Low] <=([M7BoxClose]+(10*[SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_High]+(@SD_Target*10*SD_Size) as [TP],
	case when [High]>=([IDR_High]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') and [M7Box_Color_Close_SD]<-0.8
union all 
Select a.*,[M7Box_Color_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[M7BoxClose]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick) as [SL],--if close below -0.8, then use 1SD+3tick as SL
	case when [High]>=([M7BoxClose]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') and [M7Box_Color_Close_SD]<-0.8


/***check***/
select DR_date, [Session],[M7BoxClose], [Low] as [SL_temp] 
into #tmp8_SLtemp from #tmp7 
where [Box Color] in ('Green') and Timeonly in ('20:25:00','03:55:00','10:25:00') 
group by DR_date, [Session],[M7BoxClose],[Low] 
union all 
select DR_date, [Session],[M7BoxClose],[High] as [SL_temp] 
from #tmp7 where [Box Color] in ('Red') and Timeonly in ('20:25:00','03:55:00','10:25:00') 
group by DR_date, [Session],[M7BoxClose],[High]

/******************************/
-- RBC backtest 2
-- Entry once box close happens, at 10:30
-- First, make sure the temporary table exists for Stop loss price
-- if the wick is too short, we will use Session Close + 1 SD

drop table if exists #tmp8_SLtemp
Select DR_date, [Session],[M7BoxClose], [Box Color] ,
	[Low] as [SL_temp],
	abs([M7BoxClose]-[Low]) as [Diff],
	case when abs([M7BoxClose]-[Low]) <0.1 then [M7BoxClose]-0.1 else [Low] end as [StopPrice]
	into #tmp8_SLtemp 
	from #tmp7 
where [Box Color] in ('Green') and Timeonly in ('20:25:00','03:55:00','10:25:00') 
group by DR_date, [Session],[M7BoxClose], [Low], [Box Color] 
union all 
Select DR_date, [Session],[M7BoxClose],  [Box Color],
	[High] as [SL_temp],
	abs([M7BoxClose]-[High]) as [Diff],
	case when abs([M7BoxClose]-[High]) < 0.1 then [M7BoxClose]+0.1 else [High] end as [StopPrice]
	from #tmp7 
	where [Box Color] in ('Red') and Timeonly in ('20:25:00','03:55:00','10:25:00') 
group by DR_date, [Session],[M7BoxClose],[High], [Box Color]

Select top 10* from #tmp8_SLtemp order by DR_date desc

-- Create the final table with the necessary calculations
drop table if exists #tmp7_SL
Select a.*,b.[StopPrice]
into #tmp7_SL
from #tmp7 a
left join
#tmp8_SLtemp b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]

Select top 10* from #tmp7_SL

Declare @SD_Target decimal(4,2);
Declare @plus_tick decimal(4,2);

set @SD_Target=1.0;
set @plus_tick=3;

drop table if exists #tmp8_1
Select a.*, [M7Box_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[StopPrice]-(0.01*@plus_tick) as [SL],
	case when [Low] <=([StopPrice]-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_high]+(@SD_Target*10*SD_Size) as [TP],
	case when [High]>=([IDR_high]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8_1
from #tmp7_SL a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') 
union all 
Select a.*,[M7Box_Close_SD] as [Entry_SD],
	[M7BoxClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[StopPrice]+(0.01*@plus_tick) as [SL],
	case when [High] >=[StopPrice]+(0.01*@plus_tick) then 1 else 0 end as [SL_hit],
	[IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7_SL a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') 

/************************************/
--RBC test
--It will be base on box color
--Entry M7 box mid
--SL Session Open + 3 ticks (3 ticks below M7 box)
--(template when Entry SD need to be calculated)

-- Create the table with the necessary calculations
drop table if exists #tmp7_SL
Select a.*,b.[M7_0.5] as [EntryPrice], a.[M7BoxOpen] as [StopPrice]
into #tmp7_SL
from #tmp7 a
left join
#DailyInfo06 b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]
Select top 10* from #tmp7
Select top 10* from #tmp8_1

Declare @SD_Target decimal(4,2);
Declare @plus_tick decimal(4,2);

set @SD_Target=1.0;
set @plus_tick=3;

drop table if exists #tmp8_1
Select a.*,convert(decimal(10,2),((IDR_High-[EntryPrice])*-0.1/SD_Size)) as [Entry_SD], --figure out the SD of M7Mid
        [EntryPrice] as [Entry],
        case when [EntryPrice] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
        [StopPrice]-(0.01*@plus_tick) as [SL],
        case when [Low] <=([StopPrice]-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
        [IDR_high]+(@SD_Target*10*SD_Size) as [TP],
        case when [High]>=([IDR_high]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8_1
from #tmp7_SL a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') 
union all 
Select a.*,convert(decimal(10,2),((IDR_Low-[EntryPrice])*0.1/SD_Size)) as [Entry_SD],
        [EntryPrice] as [Entry],
        case when [EntryPrice] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
        [StopPrice]+(0.01*@plus_tick) as [SL],
        case when [High] >=[StopPrice]+(0.01*@plus_tick) then 1 else 0 end as [SL_hit],
        [IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
        case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7_SL a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') 


		
/************************************/
--RBC test
--It will be base on box color
--Entry at Box close
--SL M7 box Mid + 3 ticks

-- Create the table with the necessary calculations
drop table if exists #tmp7_SL
Select a.*,b.[M7_0.5] as [StopPrice],a.[M7BoxClose] as [EntryPrice]
into #tmp7_SL
from #tmp7 a
left join
#DailyInfo06 b
on a.DR_Date=b.DR_Date and a.[Session]=b.[Session]

Select top 10* from #tmp7

Declare @SD_Target decimal(4,2);
Declare @plus_tick decimal(4,2);

set @SD_Target=1.0;
set @plus_tick=3;

drop table if exists #tmp8_1
Select a.*,[M7Box_Color_Close_SD] as [Entry_SD], --figure out the SD of M7Mid
        [EntryPrice] as [Entry],
        case when [EntryPrice] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
        [StopPrice]-(0.01*@plus_tick) as [SL],
        case when [Low] <=([StopPrice]-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
        [IDR_high]+(@SD_Target*10*SD_Size) as [TP],
        case when [High]>=([IDR_high]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8_1
from #tmp7_SL a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') 
union all 
Select a.*,[M7Box_Color_Close_SD] as [Entry_SD], --figure out the SD of M7Mid
        [EntryPrice] as [Entry],
        case when [EntryPrice] between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
        [StopPrice]+(0.01*@plus_tick) as [SL],
        case when [High] >=[StopPrice]+(0.01*@plus_tick) then 1 else 0 end as [SL_hit],
        [IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
        case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7_SL a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') 



--Recurring testing
--New 

-- Drop the existing table if it exists
drop table if exists #tmp8_1;

-- Declare variables
Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);
Declare @Entry decimal(4,2);
Declare @InitialEntry decimal(4,2);
Declare @Step decimal(4,2);
Declare @MaxEntry decimal(4,2);

set @SD_Target = 1.5;
set @SD_SL = -0.5;  
set @plus_tick = 3;
set @InitialEntry = 0.0;  -- Starting value
set @Step = -0.1;  -- Step value
set @MaxEntry = -0.5;  -- Ending value

-- Initialize the Entry value
set @Entry = @InitialEntry;

-- Create a temporary table to hold the results

   Select a.*, @Entry as [Entry_SD],
            [SD0]+(@Entry*10* [SD_Size]) as [Entry],
            case when [SD0]+(@Entry*10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
            case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]+(@SD_Target*10*SD_Size) as [TP],
            case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
	into #tmp8_1
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
        union all
    Select a.*,@Entry as [Entry_SD],
            [SD0] - (@Entry* [SD_Size]) as [Entry],
            case when [SD0] - (@Entry * 10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
            case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]-(@SD_Target*10*SD_Size) as [TP],
            case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short')

-- Loop through the entry values
WHILE @Entry >= @MaxEntry
BEGIN
    -- Insert the results for the current entry value into the temporary table
    insert into #tmp8_1
    Select a.*,@Entry as [Entry_SD],
            [SD0]+(@Entry*10* [SD_Size]) as [Entry],
            case when [SD0]+(@Entry*10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
            case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]+(@SD_Target*10*SD_Size) as [TP],
            case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
        union all
    Select a.*,@Entry as [Entry_SD],
            [SD0] - (@Entry* [SD_Size]) as [Entry],
            case when [SD0] - (@Entry * 10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
            case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]-(@SD_Target*10*SD_Size) as [TP],
            case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short');

    -- Decrement the Entry value by the step value
    set @Entry = @Entry + @Step;
END;
/********************************/
/***!!Part always same!!***/
--Choose date range

drop table if exists #tmp8
Select * into #tmp8 from #tmp8_1 
drop table if exists #tmp9

Select top 10* from #tmp9
Select a.DR_date,a.[session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
           a.FirstEntryTime,
           b.Stop_Out_Time
into #tmp9
from
        (Select DR_date,[session],Conf_Direction,[Box Color],[Entry_SD],
            min(T_DateTime) as FirstEntryTime           
        from #tmp8
        where [Qualify_Entry_Time]=1
        group by DR_date,[session],Conf_Direction,[Box Color],[Entry_SD])  a
left join
        (Select DR_date,[session],[Box Color],[Entry_SD],
            min(T_DateTime) as [Stop_Out_Time]
        from #tmp8
        where [SL_hit]=1 group by DR_date,[session],[Box Color],[Entry_SD] ) b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]
order by DR_date desc

Select * from #tmp9 order by DR_Date desc
Select * from #tmp8 where DR_Date='2021-02-15' and [Session] in ('RDR')

Drop table if exists #tmp8_2

Select a.*,b.FirstEntryTime,b.Stop_Out_Time
into #tmp8_2
from #tmp8 a
left join #tmp9 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]

drop table if exists  #TPreach
Select DR_date,[Session],[Entry_SD],
	min(T_DateTime) as [TP_Reach_Time],ExitPrice
into #TPreach
from #tmp8_2
where [TP_hit]=1 and T_DateTime>=FirstEntryTime
group by DR_date,[session],[Entry_SD],ExitPrice

--Create data set with First Entry Time, stopput time and TP reach time
--Include dates with no entry

drop table if exists #Result
Select a.DR_date,a.[Session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
	b.FirstEntryTime, b.Stop_Out_Time,c.[TP_Reach_Time],c.[ExitPrice]
into #Result
from #tmp8 a
left join #tmp9 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]
left join #TPreach c
on a.DR_date=c.DR_date and a.[Session]=c.[Session] and a.[Entry_SD]=c.[Entry_SD]
group by a.DR_date,a.[Session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
	b.FirstEntryTime, b.Stop_Out_Time,c.[TP_Reach_Time],c.[ExitPrice]

Select * from #Result where DR_Date='2021-02-15' and [Session] in ('RDR')
Select * from #tmp8_2 where DR_Date='2021-02-15' and [Session] in ('RDR')

--Determining if the entry is a sucess or fail
drop table if exists #tmp13
Select a.*,
        case 
        when FirstEntrytime is null then 'NoEntry'
        when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is null then 'Exit'--TP not reach but also did not hit the SL
        when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is null then 'Fail'
        when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is not null then 'Success'
        when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time<Stop_Out_time then 'Success' --if target reach before any stop loss then the trade is successful
        when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time>=Stop_Out_time then 'Fail'
       end as [Outcome]
       into #tmp13
from #Result a
order by DR_date desc

Select * from #tmp13 where DR_Date='2021-02-15' and [Session] in ('RDR')

Select a.*, 
    b.[Entry],
    b.[SL], 
    b.[TP] 
	--b.[ExitPrice]  --  COALESCE(c.[SessionClosePrice], d.[SessionClosePrice]) as [SessionClosePrice]
into #tmp14
from #tmp13 a
	left join (
	Select DR_date, [session], [Entry_SD],[Entry], SL, TP
		from #tmp8 
    group by DR_date, [session], [Entry_SD],[Entry], SL, TP) b
	on a.DR_date = b.DR_date and a.[session] = b.[session] and a.[Entry_SD]=b.[Entry_SD]
--left join (
--    Select DR_date, [session], [Close] as [SessionClosePrice] 
--    from #tmp8
--    where Timeonly in ('01:55:00','08:25:00','15:55:00')
--    group by DR_date, [session], [Close]
--) c on a.DR_date = c.DR_date and a.[session] = c.[session] 
--left join (
--    Select DR_date, [session], [Close] as [SessionClosePrice] 
--    from #tmp8
--    where Timeonly in ('01:55:00','08:25:00','12:55:00')
--    group by DR_date, [session], [Entry_SD],[Entry], SL, TP, [Close]
--) d on a.DR_date = d.DR_date and a.[session] = d.[session] 

Select * from #tmp14 where DR_Date='2011-02-25' and [Session] in ('ADR')
Select * from #tmp8 where DR_Date='2011-02-25' and [Session] in ('ADR')
Select * from #tmp7 where DR_Date='2021-02-15' and [Session] in ('RDR')

Select top 100 * from #tmp13
--Calculate R  
drop table if exists #tmp15
Select DR_date,
    case format(DR_date,'ddd') 
            when 'Mon' then 1
            when 'Tue' then 2
            when 'Wed' then 3
            when 'Thu' then 4
            when 'Fri' then 5
            when 'Sat' then 6
            when 'Sun' then 7
    end as DoW,
    [session],Conf_Direction,[Entry_SD],
    convert(VARCHAR(5),cast(FirstEntryTime as Time),108) as [FirstEntryTime],
    convert(VARCHAR(5),cast(Stop_Out_Time as Time),108) as [Stop_Out_Time],
    convert(VARCHAR(5),cast(TP_Reach_Time as Time),108) as [TP_Reach_Time],
    Outcome,
    [Entry],
    SL,
    TP,
    ExitPrice,
    case 
            when [Outcome]='No Entry' then 0
            when [Outcome]='Fail' then abs(Entry-SL)*-1
            when [Outcome]='Success' then abs(Entry-TP)
            when [Outcome]='Exit' and Conf_Direction='Long' then (ExitPrice-[Entry])
            when [Outcome]='Exit' and Conf_Direction='Short' then ([Entry]-ExitPrice)
    end as [PL],
    convert(decimal(10,2),abs(([Entry]-TP)/([Entry]-SL))) as PotentialRR
into #tmp15
from #tmp14


Select top 10 * from #tmp15                                                                
--determine R achieved
--not done. TB done

drop table if exists #tmp16_1
Select a.*,
        convert(decimal(10,2),
        case 
			when [Outcome]='No Entry' then 0
            when [Outcome]='Fail' then -1
            when [Outcome]='Success' then PotentialRR
            when [Outcome]='Exit' then (PL)/abs([Entry]-SL)
        end) as [RR]
into #tmp16_1 --13
from #tmp15 a

Select * from #DailyInfo06 where DR_Date='2009-02-13'
drop table if exists #tmp16
Select a.*,b.[M7BoxOpen],b.[M7BoxClose],b.[M7BoxSize_Range],--22
	case when a.Conf_Direction='Long' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Below M7Box'
		when a.Conf_Direction='Long' and a.[Entry]>b.[M7Box_Raw_top] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]>b.[M7Box_Raw_top] then 'Below M7Box'
		when a.[Entry]<=b.[M7Box_Raw_top] and a.[Entry]>=b.[M7Box_raw_bottom] then 'Inside M7Box' --inclusive of open and close line
	when a.Conf_Direction='No Conf' then 'No Conf'
	end as [Entry relative to M7Box]
into #tmp16
from #tmp16_1 a
left join #DailyInfo06 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]

Select  * from #tmp16 where [Session]='RDR' order by DR_Date desc
drop table if exists  [Futures].[dbo].[Retirement] 
Select * into [Futures].[dbo].[Retirement] from #tmp16

drop table if exists  [Futures].[dbo].[RBC_0.5SL] 
Select * into [Futures].[dbo].[RBC_0.5SL]  from #tmp16

--need refine!!!!!!!!
--Summarize the data

--overall

--Analysis 1
--create table with win% by session by SD Entry

drop table if exists #tmp17_1
Select 
	[Session],[Entry_SD],	
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17_1
	from #tmp16 
group by 
		[Session],[Entry_SD],Outcome 
	
Select top 10* from  #tmp17_1
drop table if exists #tmp19_1
Select a.[Session], a.[Entry_SD], a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19_1
	from #tmp17_1 a
	left join
		(Select [Session],[Entry_SD],
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17_1
		group by [Session],[Entry_SD]) b
	on a.[Session]=b.[Session]  and a.[Entry_SD]=b.[Entry_SD]

Select * from #tmp19_1

Select a.[Session],a.[Entry_SD],a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
from #tmp19_1 a
order by a.[Session],a.[Entry_SD]

--Analysis 2
--create table with win% by Session by Entry SD

drop table if exists #tmp17
Select 
	[Session], [Entry_SD], 	
	case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end as DoW,
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17
	from #tmp16 
group by 
		[Session],[Entry_SD], format(DR_date,'ddd'), Outcome 
	order by 
		case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end

	Select * from #tmp17 where DoW=7

drop table if exists #tmp19
Select a.[Session],a.[Entry_SD], a.DoW,a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19
	from #tmp17 a
	left join
		(Select [Session], [Entry_SD], Dow, 
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17
		group by [Session], [Entry_SD],Dow) b
	on a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD] and a.[DoW]=b.[DoW]

	Select * from #tmp19

Select a.[Session],a.[Entry_SD], a.DoW,a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
from #tmp19 a

--Analysis 3
--create table with win% by session by SD Entry
drop table if exists #tmp17_3
Select 
	[Session],	[Entry_SD],[Entry relative to M7Box],
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17_3
	from #tmp16 
group by 
		[Session],[Entry_SD],[Entry relative to M7Box],Outcome 
	


drop table if exists #tmp19_3
Select a.[Session],a.[Entry_SD],a.[Entry relative to M7Box], a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19_3
	from #tmp17_3 a
	left join
		(Select [Session],[Entry_SD],[Entry relative to M7Box],
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17_3
		group by [Session],[Entry_SD]) b
	on a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]  and a.[Entry relative to M7Box],=b.[Entry relative to M7Box]

	Select * from #tmp19

Select a.[Session],a.[Entry_SD],a.[Entry relative to M7Box], a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
from #tmp19_3 a
order by a.[Session],a.[Entry_SD]


/***********************************************************************/


/***!!Part always same!!***/
--Choose date range
drop table if exists #tmp8
Select * into #tmp8 from #tmp8_1 
drop table if exists #tmp9

Select a.DR_date,a.[session],a.Conf_Direction,a.[Box Color],
	   a.FirstEntryTime,
	   b.Stop_Out_Time
into #tmp9
from
	(Select DR_date,[session],Conf_Direction,[Box Color],
	    min(T_DateTime) as FirstEntryTime
		--cast(min(T_DateTime) as Time) as FirstEntryTime
	from #tmp8
	where [Qualify_Entry_Time]=1
	group by DR_date,[session],Conf_Direction,[Box Color])  a
left join
	(Select DR_date,[session],[Box Color],
	    min(T_DateTime) as [Stop_Out_Time]
		--cast(min(T_DateTime) as Time) as [Stop_Out_Time]
	from #tmp8
	where [SL_hit]=1 group by DR_date,[session],[Box Color] ) b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]
order by DR_date desc

Select * from #tmp9 order by DR_Date desc

Drop table if exists #FirstEntry
Select DR_date,[session],Conf_Direction,	
	min(T_DateTime) as FirstEntryTime
	--cast(min (T_DateTime) as Time) as FirstEntryTime
	into #FirstEntry
from #tmp8
where [Qualify_Entry_Time]=1
group by DR_date,[session],Conf_Direction

drop table if exists #TPreach
Select c.DR_date, c.[session],
	 min(T_DateTime) as [TP_Reach_Time]	
	--cast(min (T_DateTime) as Time) as [TP_Reach_Time]
into #TPreach
from #tmp8 c
join #FirstEntry fe on c.DR_date=fe.DR_date and c.[session]=fe.[session] --inner join
where [TP_hit]=1 and c.T_DateTime>=fe.FirstEntryTime group by c.DR_date,c.[session]
--where [TP_hit]=1 and c.Timeonly>=fe.FirstEntryTime group by c.DR_date,c.[session]
--Select * from #TPreach order by Dateonly desc
drop table if exists #tmp10
Select a.* ,
	b.[TP_Reach_Time]
	into #tmp10
	from #tmp9 a 
left join #TPreach b 
	on a.DR_date=b.DR_date and a.[session]=b.[session]

Select * from #tmp10 order by DR_date desc
--All dates with no entry

drop table if exists #tmp11
Select DR_date,[session],Conf_Direction,[Box Color],
    cast(null as DateTime) as FirstEntryTime
	into #tmp11
from #tmp8 
group by DR_date,[session],Conf_Direction,[Box Color]
having sum(Qualify_Entry_Time)=0


drop table if exists #tmp12
Select a.*,b.Stop_Out_Time,c.[TP_Reach_Time] 
	into #tmp12 
	from #tmp11 a
left join
		(Select DR_date,[session],Conf_Direction,
		cast(min(T_DateTime) as DateTime) as [Stop_Out_Time]
	from #tmp8
		where [SL_hit]=1 group by DR_date,[session],Conf_Direction) b
		on a.DR_date=b.DR_date and a.[session]=b.[session]
left join
		(Select DR_date,[session],
		cast(min(T_DateTime) as DateTime) as [TP_Reach_Time]
	from #tmp8 
		where [TP_hit]=1 group by DR_date,[session])c
		on a.DR_date=c.DR_date and a.[session]=c.[session]

drop table if exists #Result	
Select * into #Result 
	from #tmp10
	union all 
Select * from #tmp12

Select top 100* from #Result where DR_Date in ('2023-11-14','2011-09-09','2009-10-08') order by DR_Date, [Session]
Select * from #Result order by DR_date desc
--Determining if the entry is a sucess or fail
drop table if exists #tmp13
Select a.*,
	case 
		 when FirstEntrytime is null then 'NoEntry'
		 when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is null then 'Exit'--TP not reach but also did not hit the SL
		 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is null then 'Fail'
		 when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is not null then 'Success'
		 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time<Stop_Out_time then 'Success' --if target reach before any stop loss then the trade is successful
		 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time>=Stop_Out_time then 'Fail'
	end as [Outcome]
	into #tmp13
from #Result a
order by DR_date desc

--Join with entry, SL and TP
--drop table if exists #tmp14
--Select a.*,b.[Entry],b.[SL],b.[TP],b.[SessionClosePrice]
--	into #tmp14
--	from #tmp13 a
--	left join
--			(Select DR_date,[session],[Entry],SL,TP,[Close] as [SessionClosePrice] 
--						from #tmp8
--where Timeonly in ('01:55:00','08:25:00','15:55:00')
--group by DR_date,[session],[Entry],SL,TP,[Close])b
--on a.DR_date=b.DR_date and a.[session]=b.[session]

Select top 1000* from #tmp7_SL
drop table if exists #tmp14;

Select a.*, 
    COALESCE(b.[Entry], c.[Entry]) as [Entry], 
    COALESCE(b.[SL], c.[SL]) as [SL], 
    COALESCE(b.[TP], c.[TP]) as [TP], 
    COALESCE(b.[SessionClosePrice], c.[SessionClosePrice]) as [SessionClosePrice]
into #tmp14
from #tmp13 a
left join (
    Select DR_date, [session], [Entry], SL, TP, [Close] as [SessionClosePrice] 
    from #tmp8
    where Timeonly in ('01:55:00','08:25:00','15:55:00')
    group by DR_date, [session], [Entry], SL, TP, [Close]
) b on a.DR_date = b.DR_date and a.[session] = b.[session]
left join (
    Select DR_date, [session], [Entry], SL, TP, [Close] as [SessionClosePrice] 
    from #tmp8
    where Timeonly in ('01:55:00','08:25:00','13:00:00')
    group by DR_date, [session], [Entry], SL, TP, [Close]
) c on a.DR_date = c.DR_date and a.[session] = c.[session];



--Calculate R  
drop table if exists #tmp15
Select DR_date,
		case format(DR_date,'ddd') 
			when 'Mon' then 1
			when 'Tue' then 2
			when 'Wed' then 3
			when 'Thu' then 4
			when 'Fri' then 5
			when 'Sat' then 6
			when 'Sun' then 7
		end as DoW,
		[session],Conf_Direction,
		convert(VARCHAR(5),cast(FirstEntryTime as Time),108) as [FirstEntryTime],
		convert(VARCHAR(5),cast(Stop_Out_Time as Time),108) as [Stop_Out_Time],
		convert(VARCHAR(5),cast(TP_Reach_Time as Time),108) as [TP_Reach_Time],
		--cast(Stop_Out_Time as Time) as [Stop_Out_Time],
        --cast(TP_Reach_Time as Time) as [TP_Reach_Time],
		Outcome,
		[Entry],
		SL,
		TP,
		SessionClosePrice,
		case 
			when [Outcome]='No Entry' then 0
			when [Outcome]='Fail' then abs(Entry-SL)*-1
			when [Outcome]='Success' then abs(Entry-TP)
			when [Outcome]='Exit' and Conf_Direction='Long' then (SessionClosePrice-[Entry])
			when [Outcome]='Exit' and Conf_Direction='Short' then ([Entry]-SessionClosePrice)
		end as [PL],
		convert(decimal(10,2),abs(([Entry]-TP)/([Entry]-SL))) as PotentialRR

into #tmp15
from #tmp14


Select top 10 * from #tmp15								
--determine R achieved

drop table if exists #tmp16_1
Select a.*,
	convert(decimal(10,2),
		case when [Outcome]='No Entry' then 0
			 when [Outcome]='Fail' then -1
             when [Outcome]='Success' then PotentialRR
             when [Outcome]='Exit' then (PL)/abs([Entry]-SL)
	end) as [RR]
into #tmp16_1 --13
from #tmp15 a


drop table if exists #tmp16
Select a.*,b.[Open],b.[Close],
	case when a.Conf_Direction='Long' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Below M7Box'
		when a.Conf_Direction='Long' and a.[Entry]>b.[M7Box_Raw_top] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]>b.[M7Box_Raw_top] then 'Below M7Box'
		when a.[Entry]<=b.[M7Box_Raw_top] and a.[Entry]>=b.[M7Box_raw_bottom] then 'Inside M7Box' --inclusive of open and close line
	when a.Conf_Direction='No Conf' then 'No Conf'
	end as [Entry relative to M7Box]
into #tmp16
from #tmp16_1 a
left join #DailyInfo06 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]

Select  * from #tmp16 where [Session]='RDR' order by DR_Date desc
Select top 10 * from 


--need refine!!!!!!!!
--Summarize the data

--overall


drop table if exists #tmp17_1
Select 
	[Session],	
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17_1
	from #tmp16 
group by 
		[Session],Outcome 
	


drop table if exists #tmp19_1
Select a.[Session], a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19_1
	from #tmp17_1 a
	left join
		(Select [Session],
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17_1
		group by [Session]) b
	on a.[Session]=b.[Session] 

	Select * from #tmp19

Select a.[Session],a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
from #tmp19_1 a
order by a.[Session]




drop table if exists #tmp17
Select 
	[Session],	
	case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end as DoW,
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17
	from #tmp16 
group by 
		[Session], format(DR_date,'ddd'), Outcome 
	order by 
		case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end

	Select * from #tmp17 where DoW=7

drop table if exists #tmp19
Select a.[Session], a.DoW,a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19
	from #tmp17 a
	left join
		(Select [Session], Dow, 
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17
		group by [Session], Dow) b
	on a.[Session]=b.[Session] and a.[DoW]=b.[DoW]

	Select * from #tmp19

Select a.[Session], a.DoW,a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
	  -- (a.Tradecount/nullif(a.DayswithEntry,0)) as WinPercentage
		--round(a.Tradecount/nullif(a.DayswithEntry,0)*100,2) as WinPercentage
from #tmp19 a

--5
--Combine with M7 Box color close SD to find the best sent it entry

Select a.*,b.DoW,b.M7BoxSize,b.M7Box_Color_Close_SD
from #tmp16 a
left join #DailyInfo06 b
on a.[DR_date]=b.[DR_date] and a.[Session]=b.[Session]
