
--Recurring testing
--New 

-- Drop the existing table if it exists
drop table if exists #tmp8_1;

-- Declare variables
Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);
Declare @Entry decimal(4,2);
Declare @InitialEntry decimal(4,2);
Declare @Step decimal(4,2);
Declare @MaxEntry decimal(4,2);

set @SD_Target = 1.5;
set @SD_SL = -0.5;  
set @plus_tick = 3;
set @InitialEntry = 0.0;  -- Starting value
set @Step = -0.1;  -- Step value
set @MaxEntry = -0.5;  -- Ending value

-- Initialize the Entry value
set @Entry = @InitialEntry;

-- Create a temporary table to hold the results

   Select a.*, @Entry as [Entry_SD],
            [SD0]+(@Entry*10* [SD_Size]) as [Entry],
            case when [SD0]+(@Entry*10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
            case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]+(@SD_Target*10*SD_Size) as [TP],
            case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
	into #tmp8_1
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
        union all
    Select a.*,@Entry as [Entry_SD],
            [SD0] - (@Entry* [SD_Size]) as [Entry],
            case when [SD0] - (@Entry * 10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
            case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]-(@SD_Target*10*SD_Size) as [TP],
            case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short')

-- Loop through the entry values
WHILE @Entry >= @MaxEntry
BEGIN
    -- Insert the results for the current entry value into the temporary table
    insert into #tmp8_1
    Select a.*,@Entry as [Entry_SD],
            [SD0]+(@Entry*10* [SD_Size]) as [Entry],
            case when [SD0]+(@Entry*10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick) as [SL],
            case when [Low]<=([SD0]+(@SD_SL*10* [SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]+(@SD_Target*10*SD_Size) as [TP],
            case when [High]>=([SD0]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Long')
        union all
    Select a.*,@Entry as [Entry_SD],
            [SD0] - (@Entry* [SD_Size]) as [Entry],
            case when [SD0] - (@Entry * 10* [SD_Size]) between [Low] and [High] then 1 else 0 end as [Qualify_Entry_Time],
            [SD0] - (@SD_SL*10* [SD_Size])+(0.01*@plus_tick) as [SL],
            case when [High]>=([SD0]-(@SD_SL*10* [SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
            [SD0]-(@SD_Target*10*SD_Size) as [TP],
            case when [Low]<= ([SD0]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
        from #tmp7 a
        where [Session] in ('ADR','ODR','RDR') and DR_Box='Other'and T_DateTime>[First_Conf_T_DateTime] and Conf_Direction in ('Short');

    -- Decrement the Entry value by the step value
    set @Entry = @Entry + @Step;
END;

/***!!Part always same!!***/
--Choose date range
drop table if exists #tmp8
Select * into #tmp8 from #tmp8_1 
drop table if exists #tmp9

Select a.DR_date,a.[session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
           a.FirstEntryTime,
           b.Stop_Out_Time
into #tmp9
from
        (Select DR_date,[session],Conf_Direction,[Box Color],[Entry_SD],
            min(T_DateTime) as FirstEntryTime
                --cast(min(T_DateTime) as Time) as FirstEntryTime
        from #tmp8
        where [Qualify_Entry_Time]=1
        group by DR_date,[session],Conf_Direction,[Box Color],[Entry_SD])  a
left join
        (Select DR_date,[session],[Box Color],[Entry_SD],
            min(T_DateTime) as [Stop_Out_Time]
                --cast(min(T_DateTime) as Time) as [Stop_Out_Time]
        from #tmp8
        where [SL_hit]=1 group by DR_date,[session],[Box Color],[Entry_SD] ) b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]
order by DR_date desc

Select * from #tmp9 order by DR_Date desc

Drop table if exists #tmp8_2

Select a.*,b.FirstEntryTime,b.Stop_Out_Time
into #tmp8_2
from #tmp8 a
left join #tmp9 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]

Select DR_date,[Session],[Entry_SD],
	min(T_DateTime) as [TP_Reach_Time]
into #TPreach
from #tmp8_2
where [TP_hit]=1 and T_DateTime>=FirstEntryTime
group by DR_date,[session],[Entry_SD]

--Create data set with First Entry Time, stopput time and TP reach time
--Include dates with no entry

drop table if exists #Result
Select a.DR_date,a.[Session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
	b.FirstEntryTime, b.Stop_Out_Time,c.[TP_Reach_Time]
into #Result
from #tmp8 a
left join #tmp9 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session] and a.[Entry_SD]=b.[Entry_SD]
left join #TPreach c
on a.DR_date=c.DR_date and a.[Session]=c.[Session] and a.[Entry_SD]=c.[Entry_SD]
group by a.DR_date,a.[Session],a.Conf_Direction,a.[Box Color],a.[Entry_SD],
	b.FirstEntryTime, b.Stop_Out_Time,c.[TP_Reach_Time]



--Determining if the entry is a sucess or fail
drop table if exists #tmp13
Select a.*,
        case 
                 when FirstEntrytime is null then 'NoEntry'
                 when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is null then 'Exit'--TP not reach but also did not hit the SL
                 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is null then 'Fail'
                 when FirstEntrytime is not null and Stop_Out_Time is null and TP_Reach_Time is not null then 'Success'
                 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time<Stop_Out_time then 'Success' --if target reach before any stop loss then the trade is successful
                 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and TP_Reach_Time>=Stop_Out_time then 'Fail'
        end as [Outcome]
        into #tmp13
from #Result a
order by DR_date desc

--Join with entry, SL and TP
--drop table if exists #tmp14
--Select a.*,b.[Entry],b.[SL],b.[TP],b.[SessionClosePrice]
--        into #tmp14
--        from #tmp13 a
--        left join
--                        (Select DR_date,[session],[Entry],SL,TP,[Close] as [SessionClosePrice] 
--                                                from #tmp8
--where Timeonly in ('01:55:00','08:25:00','15:55:00')
--group by DR_date,[session],[Entry],SL,TP,[Close])b
--on a.DR_date=b.DR_date and a.[session]=b.[session]

Select top 1000* from #tmp7_SL
drop table if exists #tmp14;

Select a.*, 
    COALESCE(b.[Entry], c.[Entry]) as [Entry], 
    COALESCE(b.[SL], c.[SL]) as [SL], 
    COALESCE(b.[TP], c.[TP]) as [TP], 
    COALESCE(b.[SessionClosePrice], c.[SessionClosePrice]) as [SessionClosePrice]
into #tmp14
from #tmp13 a
left join (
    Select DR_date, [session], [Entry_SD],[Entry], SL, TP, [Close] as [SessionClosePrice] 
    from #tmp8
    where Timeonly in ('01:55:00','08:25:00','15:55:00')
    group by DR_date, [session], [Entry_SD],[Entry], SL, TP, [Close]
) b on a.DR_date = b.DR_date and a.[session] = b.[session] and a.[Entry_SD]=b.[Entry_SD]
left join (
    Select DR_date, [session], [Entry_SD],[Entry], SL, TP, [Close] as [SessionClosePrice] 
    from #tmp8
    where Timeonly in ('01:55:00','08:25:00','13:00:00')
    group by DR_date, [session], [Entry_SD],[Entry], SL, TP, [Close]
) c on a.DR_date = c.DR_date and a.[session] = c.[session]  and a.[Entry_SD]=c.[Entry_SD];



--Calculate R  
drop table if exists #tmp15
Select DR_date,
                case format(DR_date,'ddd') 
                        when 'Mon' then 1
                        when 'Tue' then 2
                        when 'Wed' then 3
                        when 'Thu' then 4
                        when 'Fri' then 5
                        when 'Sat' then 6
                        when 'Sun' then 7
                end as DoW,
                [session],Conf_Direction,[Entry_SD],
                convert(VARCHAR(5),cast(FirstEntryTime as Time),108) as [FirstEntryTime],
                convert(VARCHAR(5),cast(Stop_Out_Time as Time),108) as [Stop_Out_Time],
                convert(VARCHAR(5),cast(TP_Reach_Time as Time),108) as [TP_Reach_Time],
                --cast(Stop_Out_Time as Time) as [Stop_Out_Time],
        --cast(TP_Reach_Time as Time) as [TP_Reach_Time],
                Outcome,
                [Entry],
                SL,
                TP,
                SessionClosePrice,
                case 
                        when [Outcome]='No Entry' then 0
                        when [Outcome]='Fail' then abs(Entry-SL)*-1
                        when [Outcome]='Success' then abs(Entry-TP)
                        when [Outcome]='Exit' and Conf_Direction='Long' then (SessionClosePrice-[Entry])
                        when [Outcome]='Exit' and Conf_Direction='Short' then ([Entry]-SessionClosePrice)
                end as [PL],
                convert(decimal(10,2),abs(([Entry]-TP)/([Entry]-SL))) as PotentialRR

into #tmp15
from #tmp14


Select top 10 * from #tmp15                                                                
--determine R achieved
--not done. TB done

drop table if exists #tmp16_1
Select a.*,
        convert(decimal(10,2),
                case when [Outcome]='No Entry' then 0
                         when [Outcome]='Fail' then -1
             when [Outcome]='Success' then PotentialRR
             when [Outcome]='Exit' then (PL)/abs([Entry]-SL)
        end) as [RR]
into #tmp16_1 --13
from #tmp15 a


drop table if exists #tmp16_1
Select a.*,
	convert(decimal(10,2),
		case when [Outcome]='No Entry' then 0
			 when [Outcome]='Fail' then -1
             when [Outcome]='Success' then PotentialRR
             when [Outcome]='Exit' then (PL)/abs([Entry]-SL)
	end) as [RR]
into #tmp16_1 --13
from #tmp15 a


drop table if exists #tmp16
Select a.*,b.[Open],b.[Close],
	case when a.Conf_Direction='Long' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Below M7Box'
		when a.Conf_Direction='Long' and a.[Entry]>b.[M7Box_Raw_top] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]<b.[M7Box_Raw_bottom] then 'Above M7Box'
		when a.Conf_Direction='Short' and a.[Entry]>b.[M7Box_Raw_top] then 'Below M7Box'
		when a.[Entry]<=b.[M7Box_Raw_top] and a.[Entry]>=b.[M7Box_raw_bottom] then 'Inside M7Box' --inclusive of open and close line
	when a.Conf_Direction='No Conf' then 'No Conf'
	end as [Entry relative to M7Box]
into #tmp16
from #tmp16_1 a
left join #DailyInfo06 b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]

Select  * from #tmp16 where [Session]='RDR' order by DR_Date desc
Select top 10 * from 


--need refine!!!!!!!!
--Summarize the data

--overall


drop table if exists #tmp17_1
Select 
	[Session],	
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17_1
	from #tmp16 
group by 
		[Session],Outcome 
	


drop table if exists #tmp19_1
Select a.[Session], a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19_1
	from #tmp17_1 a
	left join
		(Select [Session],
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17_1
		group by [Session]) b
	on a.[Session]=b.[Session] 

	Select * from #tmp19

Select a.[Session],a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
from #tmp19_1 a
order by a.[Session]




drop table if exists #tmp17
Select 
	[Session],	
	case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end as DoW,
	Outcome, count(DR_date) as Tradecount,
	sum(RR) as RR 
	into #tmp17
	from #tmp16 
group by 
		[Session], format(DR_date,'ddd'), Outcome 
	order by 
		case format(DR_date,'ddd') 
		when 'Mon' then 1
		when 'Tue' then 2
		when 'Wed' then 3
		when 'Thu' then 4
		when 'Fri' then 5
		when 'Sat' then 6
		when 'Sun' then 7
	end

	Select * from #tmp17 where DoW=7

drop table if exists #tmp19
Select a.[Session], a.DoW,a.Outcome,a.Tradecount,b.DayswithEntry,a.RR
	into #tmp19
	from #tmp17 a
	left join
		(Select [Session], Dow, 
			sum(case when Outcome!='NoEntry' then Tradecount else 0 end) as DayswithEntry
		from #tmp17
		group by [Session], Dow) b
	on a.[Session]=b.[Session] and a.[DoW]=b.[DoW]

	Select * from #tmp19

Select a.[Session], a.DoW,a.Outcome,a.Tradecount,a.DayswithEntry,a.RR,
		case when a.DayswithEntry<>0 then 
			round((cast(a.Tradecount as float)/a.DayswithEntry)*100,2)
		else 0
		end as WinPercentage
	  -- (a.Tradecount/nullif(a.DayswithEntry,0)) as WinPercentage
		--round(a.Tradecount/nullif(a.DayswithEntry,0)*100,2) as WinPercentage
from #tmp19 a
