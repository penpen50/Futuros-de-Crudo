/************************/
--For RBC
--It will be base on box color

Select top 100 * from #tmp7
drop table if exists #tmp8

--Declare @SD_Entry decimal(4,2);
Declare @SD_Target decimal(4,2);
Declare @SD_SL decimal(4,2);
Declare @plus_tick decimal(4,2);

set @SD_Target=1.0;
set @SD_SL=-0.9;
set @plus_tick=3;
--set @SD_Entry=(Select[SessionClose] from #tmp7);

--Entry must be in the body of the session
--Entry must be before confirmation, otherwise no entry

Select a.*,
	[SessionClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[IDR_High]+(@SD_SL*10*[SD_Size])-(0.01*@plus_tick) as [SL],
	case when [Low] <=([IDR_high]+(@SD_SL*10*[SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_high]+(@SD_Target*10*SD_Size) as [TP],
	case when [High]>=([IDR_high]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
into #tmp8
from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') and [M7Box_Color_Close_SD]>=-0.8
union all 
Select a.*,
	[SessionClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[IDR_Low]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick) as [SL],
	case when [High] >=([IDR_Low]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]>=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
	where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') and [M7Box_Color_Close_SD]>=-0.8
union all 
Select a.*,
	[SessionClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[SessionClose]+(10*[SD_Size])-(0.01*@plus_tick) as [SL],--if close below -0.8, then use 1SD+3tick as SL
	case when [Low] <=([SessionClose]+(10*[SD_Size])-(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_High]+(@SD_Target*10*SD_Size) as [TP],
	case when [High]>=([IDR_High]+(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Green') and [M7Box_Color_Close_SD]<-0.8
union all 
Select a.*,
	[SessionClose] as [Entry],
	case when Timeonly in ('20:30:00','04:00:00','10:30:00') then 1 else 0 end as [Qualify_Entry_Time],
	[SessionClose]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick) as [SL],--if close below -0.8, then use 1SD+3tick as SL
	case when [High] >=([SessionClose]-(@SD_SL*10*[SD_Size])+(0.01*@plus_tick)) then 1 else 0 end as [SL_hit],
	[IDR_Low]-(@SD_Target*10*SD_Size) as [TP],
	case when [Low]<=([IDR_Low]-(@SD_Target*10*SD_Size)) then 1 else 0 end as [TP_hit]
from #tmp7 a
where [Session] in ('ADR','ODR','RDR') and DR_Box='Other' and [Box Color] in ('Red') and [M7Box_Color_Close_SD]<-0.8

Select top 10 * from #tmp8
drop table if exists #tmp9
Select a.DR_date,a.[Session],a.[Conf_Direction],a.[Box Color],
	a.FirstEntryTime,
	b.Stop_Out_Time
into #tmp9
from 
	(Select DR_Date,[Session],Conf_Direction,[Box Color]'
		cast(min(TradingDateTime) as Time) as FirstEntryTime
		from #tmp8
	where [Qualify_Entry_Time]=1
	group by DR_Date,[Session],[Conf_Direction,[Box Color]) a
left join
	(Select DR_date,[Session],
		cast(min(TradingDateTime) as Time) as [Stop_Out_Time]
	from #tmp8
where [SL_Hit]=1 group by DR_date,[Session])b
on a.DR_date=b.DR_date and a.[Session]=b.[Session]


Select * from #tmp9
drop table if exists #FirstEntry

Select DR_date,[Session],[Conf_Direction],[Box Color],
	cast(min(TradingDateTime) as Time) as FirstEntryTime
	into #FirstEntry
from #tmp8
where [Qualify_Entry_Time]=1
group by DR_date,[Session],Conf_Direction,[Box Color]

drop table if exists #TPreach

Select c.DR_date,c.[Session],
	cast(min(TradingDateTime) as Time) as [TP_Reach_Time]
into #TPreach
from #tmp8c
	join #FirstEntry fe on c.DR_date=fe.DR_Date and c.[Session]=fe.[Session]--inner join
where [TP_hit]=1 and c.[Timeonly]>=fe.FirstEntryTime group by c.DR_date,c.[Session]

drop table if exists #tmp10
Select a.*,
		   b.[TP_Reach_Time]
			 into #tmp10
		   from #tmp9 a
left join
			 #TPreach b
on a.DR_date=b.DR_date and a.[session]=b.[session]

Select * from #tmp10

--Include also dates with no entry

drop table if exists #tmp11

Select DR_date,[session],Conf_Direction, cast(null as Time) as FirstEntryTime	
	into #tmp11
from #tmp8
group by DR_date,[session],Conf_Direction
having sum (Qualify_Entry_Time)=0

drop table if exists #tmp12
Select a.*,b.Stop_Out_Time,c.[TP_Reach_Time]
	into #tmp12
	from #tmp11 a
left join
	(Select DR_date,[session],Conf_Direction,
			cast(min(TradingDateTime) as Time) as [Stop_Out_Time]
from #tmp8
	where [SL_hit]=1 group by DR_date,[session],[Conf_Direction])b
on a.DR_date=b.DR_date and a.[session]=b.[session]
left join
	(Select DR_date,[Session],
			cast(min(TradingDateTime) as Time) as [TP_Reach_Time]
from #tmp8
	where [TP_hit]=1 group by DR_date,[session])c
on a.DR_date=c.DR_date and a.[session]=c.[session]

--Combine dates with and without entry

drop table if exists #Result

Select * into #Result
	from #tmp10
union all
Select * from #tmp12

Select * from #tmp12
Select * from #Result

--Determine if the entry is a success or failure
drop table if exists #tmp13

Select a.*,
	case when FirstEntrytime is null then 'NoEntry'
		   when FirstEntrytime is null and Stop_Out_Time is null and TP_Reach_Time is null then 'Exit'--TP not reach but also did not hit the SL
			 when FirstEntrytime is not null and Stop_Out_Time is not null and TP_Reach_Time is null then 'Fail'
			 when FirstEntryTime is not null and Stop_Out_Time is null and TP_Reach_Time is not null then 'Success'
			 when FirstEntryTime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and 			TP_Reach_Time<Stop_Out_Time then 'Success'--TPreach before any SL
			 when FirstEntryTime is not null and Stop_Out_Time is not null and TP_Reach_Time is not null and 			TP_Reach_Time>=Stop_Out_Time then 'Fail'
	end as [Outcome]
into #tmp13
from #Result a
order by DR_date desc

Select * from #tmp13
Select * from #tmp8 order by TradingDateTime 

--Join with entry,SL and TP
drop table if exists #tmp14
Select a.*, b.[Entry],b.[SL],b.[TP],b.[SessionClosePrice]
	into #tmp14
	from #tmp13 a
left join
	(Select DR_date,[Session],[Entry],SL,TP,[Close] as [SessionClosePrice]
		from #tmp8
where Timeonly in ('01:55:00','08:25:00','15:55:00')
group by DR_date,[session],[Entry],SL,TP,[Close])b
on a.DR_date=b.DR_date
and a.[session]=b.[session]

Select * from #tmp14

--Calculate R
drop table if exists #tmp15

Select *,
	case when [Outcome]='No Entry' then 0
		   when [Outcome]='Fail' then abs(Entry-SL)*-1
			 when [Outcome]='Success' then abs(Entry-TP)
		   when [Outcome]='Exit' and Conf_Direction='Long' then (SessionClosePrice-[Entry])
			 when [Outcome]='Exit' and Conf_Direction='Short' then ([Entry]-SessionClosePrice)
		end as [PL],
	convert(decimal(10,2),abs(([Entry]-TP)/([Entry]-SL))) as PotentialRR
into #tmp15
from #tmp14

--determine R achieved

Select * from #tmp15
drop table if exists #tmp16
Select a.*,
	convert(decimal(10,2),case when [Outcome]='No Entry' then 0
														 when [Outcome]='Fail' then -1
                             when [Outcome]='Success' then PotentialRR
       											 when [Outcome]='Exit' then (PL)/abs([Entry]-SL)
	end) as [RR])
into #tmp16
from #tmp15 a

Select * from #tmp16

/**/
/*Figure out original dataset by SD*/
/*use #tmp7*/

Select 
	TradingDateTime,
	Dateonly.
	Timeonly,
	[Session],
	DR_Box,
	DR_date,
	[Open],
	[High],
	[Low],
	[Close],
	--SD assume long direction. for short, just use 1-
	convert(decimal(10,2),([Open]-[IDR_high])/SD_Size) as [Candle_Open_SD],
	convert(decimal(10,2),([High]-[IDR_high])/SD_Size) as [Candle_High_SD],  
  convert(decimal(10,2),([Low]-[IDR_high])/SD_Size) as [Candle_Low_SD],                                  
	convert(decimal(10,2,([Close]-[IDR_high])/SD_Size) as [Candle_Close_SD], 
	Volume,
	[Candle_Color],
	FirstConfDateTime,
	First_Conf_Time,
	Conf_Direction,
	[TF Day],
	[False Time],
	[Box Color],
	SessionOpen,
	SessionClose,
	DR_high,
	IDR_high,
	DR_Low,
	IDR_Low,
	SD_Size,
	SD_tick_Size,
	SD0,	
	DR_High_SD,
	DR_Low_SD,
	M7Box_Open_SD,	
	M7Box_Close_SD, 
	BoxSD0,
	M7Box_Color_Close_SD, 
	Raw_OpenSD,
	Raw_CloseSD,
	[SD-05]
into #SDPlot
from #tmp7

Select *,floor(Candle_CloseSD*10)/10 as round_down_close from #SDPlot where [Session]='RDR' and [Box Color]='Green' and DR_Box='Other' order by TradingDateTime desc

Select * into #SDPlotsub from #SDPlot where [Session]='RDR' and [Box Color]='Green' and DR_Box='Other' order by TradingDateTime desc

Select Timeonly,
	Candle_Close_SD,
	row_number() over (Partition by Timeonly order by Candle_Close_SD) as row_num,
	count(*) over (Partition by Timeonly) as total_count
into #CTE
from #SDPlotsub

--80 percentile
Select Timeonly,	
	min(Candle_Close_SD) as percentile_80_price
into #80_percentile
from #CTE
where row_num>=0.8*total_count
group by Timeonly
order by Timeonly

--20 percentile
drop table if exists #20_percentile
Select Timeonly,
	min(Candle_Close_SD) as percentile_20_price
into #20_percentile
from #CTE
where row_num>=0.2*total_cont
group by Timeonly
order by Timeonly

Select * from #20_percenile

--Mode
Select Timeonly,
	Candle_Close_SD as mode_price
into #Mode
From (
	Select
			Timeonly,
			Candle_Close_SD,
	  count(*) as count,
	  row_number() over (partition by Timeonly order by count(*) desc) as rn
	from #SDPlotsub
group by Timeonly, Candle_Close_SD) subquery
where rn=1
order by Timeonly;

--Median
Select 
	Timeonly,
	avg(Candle_Close_SD) as median_SD
into #MedianSD
from #CTE
where row_num in (
	 (total_count+1)/2,
  (total_count+2)/2
)
group by Timeonly
order by Timeonly;

--Average
Select 
	Timeonly,	
	Avg(Candle_Close_SD) as average_SD
into #AverageSD
from #SDPlotsub
group by Timeonly
order by Timeonly

--Join into 1 table
Select a.*,b.median_SD,c.mode_price,d.percentile_20_price,e.percentile80_price
from #AverageSD a
left join #MedianSD b
on a.Timeonly=b.Timeonly
left join #Mode c
on a.Timeonly=c.Timeonly
left join #20_percentile d
on a.Timeonly=d.Timeonly
left join #80_percentile e
on a.Timeonly=e.Timeonly


/*************/
/*BrokenTime*/
/************/

drop table if exists #Mid01
Select DR_date,[Session],[SD-05]
	into #Mid01
from #tmp7
where [session] in ('ADR','ODR','RDR')
group by DR_date,[session],[SD-05]

Select DR_Date,
	max(case when [session]='ADR' then [SD-05] else null end) as ADR_Mid,
 max(case when [session]='ODR' then [SD-05] else null end) as ODR_Mid,
 max(case when [session]='RDR' then [SD-05] else null end) as RDR_Mid
into #Mid02
from #Mid01
group by DR_date

--Join original dataset and normalize candle open and close as 1 direction range base on value

drop table if exists #Mid03
Select a.*,b.ADR_Mid,b.ODR_Mid,b.RDR_Mid,
	case when a.Candle_Color = 'Red Candle' then a.[Open] else a.[Close] end as CandleCloseH,
	case when a.Candle_Color = 'Red Candle' then a.[Close] else a.[Open] end as CandleCloseL,
into #Mid03 
from #tmp7 a
left join #Mid02 b
on a.DR_Date=b.DR_Date

--Find crossover time
Drop table if exists #Broken01
With ADRBrokenTimes as (
	Select
		DR_date,
		TradingDateTime,
		Timeonly,
		[session],
		DR_Box,
		row_number() over (partition by DR_date order by TradingDateTime) as row_num
from #Mid03
where (Timeonly between '02:00:00' and '18:00:00') and (ADR_Mid between [Low] and [High]
), 
FirstADRBrokenTime as (
	Select 
		DR_date,
		TradingDateTime,
		Timeonly as ADR_Broken,
		[session] as ADR_Broken_session,
		DR_Box as ADR_Broken_Box
from ADRBrokenTimes 
where row_num=1),

ODRBrokenTimes as(
	Select
		DR_date,
		TradingDateTime,
		Timeonly,
		[session],
		DR_Box,
		row_number() over(partition by DR_date order by TradingDateTime) as row_num
from #Mid03
where (Timeonly between '08:30:00' and '18:00:00') and (ODR_Mid between [Low] and [High])
		--(ODR_Mid between CandleCloseL and CandleCloseH)
),
FirstODRBrokenTime as (
	Select 
		DR_date,
		TradingDateTime,
		Timeonly as ODR_Broken,
		[session] as ODR_Broken_session,
		DR_Box as ODR_Broken_Box
from ODRBrokenTimes 
where row_num=1)

Select a.DR_date,a.ADR_Broken, a.ADR_Broken_session,a.ADR_Broken_Box,
		b.ODR_Broken, b.ODR_Broken_session,b.ODR_Broken_Box
	into #DailyInfo01
from #tmp6 a
left join #Broken01 b
on a.DR_date=b.DR_date

Select * from #DAilyInfo01 order by DR_dae desc


/********************/
/********Model*******/

drop table if exists #Model01
Select DR_date, datename(weekday,DR_date) as day_of_week,
	case when datename(weekday,DR_date)='Monday' then dateadd(day,-3,DR_date)
 		else dateadd(day,-1,DR_date) end as Dummydate,
	[Session],DR_High,DR_Low,IDR_High,IDR_Low,[SD-05]
into #Model01
from #DailyInfo01

Select top 100 * from #Model01 order by DR_Date 
drop table if exists #Model02
Select DR_Date,datename(weekday,DR_date) as day_of_week,
		max(case when [session]='ADR' then [SD-05] else NULL end) as ADR_Mid,
  max(case when [session]='ODR' then [SD-05] else NULL end) as ODR_Mid,
		max(case when [session]='RDR' then [SD-05] else NULL end) as RDR_Mid
into #Model02
from #Model01
group by DR_date

Select * from #Model02

--Add mid point critical to deciding model type. i.e if ODR, use ADR as determining point
--If weekday is Monday, then use Friday midpoint

drop table if exists #Model03
Select a.DR_date, a.day_of_week, a.Dummydate,[Session],a.DR_High,a.DR_Low, 
	a.IDR_High, a.IDR_Low, a.[SD-05],
	b.ADR_Mid,b.ODR_Mid,b.RDR_Mid,
	c.RDR_Mid as RDR_Mid_Previous_Day,
	case when a.[session]='ADR' then c.RDR_Mid
	     when a.[session]='ODR' then b.ADR_Mid
			   when a.[session]='RDR' then b.ODR_Mid
	end as [Critical_Mid], 

	case when a.[session]='ADR' then f.DR_High
	     when a.[session]='ODR' then d.DR_High
			   when a.[session]='RDR' then e.DR_High
	end as [Critical_DR_High],

	case when a.[session]='ADR' then f.DR_Low
	     when a.[session]='ODR' then d.DR_Low
			   when a.[session]='RDR' then e.DR_Low
	end as [Critical_DR_Low],
	
case when a.[session]='ADR' then f.IDR_High
	     when a.[session]='ODR' then d.IDR_High
			   when a.[session]='RDR' then e.IDR_High
	end as [Critical_IDR_High],

case when a.[session]='ADR' then f.IDR_Low
	     when a.[session]='ODR' then d.IDR_Low
			   when a.[session]='RDR' then e.IDR_Low
	end as [Critical_IDR_Low]

into #Model03
from #Model01 a
left join #Model02b
on a.DR_Date=b.DR_Date
left join
	(Select DR_date,RDR_Mid from #Model02) c
on a.Dummydate=c.DRdate
left join
	(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] from #Model01 
			where [Session]='ADR')d
	on a.DR_date=d.DR_date
(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] from #Model01 
			where [Session]='ODR')e
	on a.DR_date=e.DR_date
(Select DR_date,DR_High,DR_Low,IDR_High,IDR_Low,[SD-05] from #Model01 
			where [Session]='RDR')f   --from RDR to ADR model, we need to use previous day RDR
	on a.Dummydate=f.DR_date

Select * from #Model03 order by DR_Date,[Session]

--Determine the different model
drop table if exists #Model04
Select a.*,
	case when [IDR_High]<=[Critical_IDR_Low] then 'DXP'
						 when [IDR_High]<=[Critical_Mid] and [IDR_High]>[Critical_IDR_Low] then 'DX'
							when [IDR_Low]>=[Critical_IDR_High] then 'UXP'
						 when [IDR_Low]>=[Critical_Mid] and [IDR_Low]<[Critical_IDR_High] then 'UX'
							when [IDR_High]>[Critical_IDR_High] and [IDR_Low]<[Critical_IDR_Low] then 'RX'
							when [IDR_High]>=[Critical_IDR_High] and [IDR_Low]>[Critical_IDR_Low]
													and [IDR_Low]<[Critical_Mid] then 'U'
							when [IDR_Low]<=[Critical_IDR_Low] and [IDR_High]<[Critical_IDR_High]
													and [IDR_High]>[Critical_Mid] then 'D'
							when [IDR_High]<=[Critical_IDR_High] and [IDR_Low]>=[Critical_IDR_Low] then 'RC'
else 'NoModel' end as Model
into #Model04
from #Model03 a

Select * from #Model04 order by DR_Date,[Session]

Select a.*,b.Model
	from #DailyInfo01 a
left join #Model04 b
on a.[DR_Date]=b.[DR_Date] and a.[Session]=b.[Session] 
 









 




 











                                  


 









